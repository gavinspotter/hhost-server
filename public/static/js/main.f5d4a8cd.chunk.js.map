{"version":3,"sources":["shared/hooks/auth-hook.js","shared/context/auth-context.js","shared/hooks/http-hook.js","shared/components/UIElements/Modal.js","shared/components/UIElements/ErrorModal.js","img/opaque_spinner.gif","shared/components/UIElements/LoadingSpinner.js","shared/notLoggedIn/Homepage.js","loggedIn/hs/splashFeed/FilterFeedBite.js","loggedIn/hs/splashFeed/FilterFeedCrum.js","loggedIn/hs/splashFeed/FilterFeedItem.js","loggedIn/hs/splashFeed/SplashFeedItem.js","loggedIn/hs/splashFeed/SplashFeedList.js","loggedIn/hs/searchStuff/dictionary/DictionaryItem.js","loggedIn/hs/searchStuff/dictionary/DictionaryList.js","loggedIn/hs/searchStuff/dictionary/DStarItem.js","loggedIn/hs/searchStuff/dictionary/DStarList.js","loggedIn/hs/searchStuff/stars/StarDictionaryWordsItem.js","loggedIn/hs/searchStuff/stars/StarDictionaryWordsList.js","loggedIn/hs/searchStuff/stars/StarPostItem.js","loggedIn/hs/searchStuff/stars/StarPostList.js","loggedIn/hs/searchStuff/stars/StarsItem.js","loggedIn/hs/searchStuff/stars/StarsList.js","loggedIn/hs/searchStuff/splash/SplashItem.js","loggedIn/hs/searchStuff/splash/SplashList.js","loggedIn/hs/searchStuff/word/WordItem.js","loggedIn/hs/searchStuff/word/WordList.js","loggedIn/hs/searchStuff/definition/DefinitionItem.js","loggedIn/hs/searchStuff/definition/DefinitionList.js","loggedIn/hs/dictionaryFeed/DictionaryFeedItemDefinition.js","loggedIn/hs/dictionaryFeed/DictionaryAndNameItem.js","loggedIn/hs/dictionaryFeed/DictionaryFeedItem.js","loggedIn/hs/dictionaryFeed/DictionaryFeedList.js","loggedIn/hs/dictionaryFeed/SecretWordFeedDefinition.js","loggedIn/hs/dictionaryFeed/SecretWordFeedItem.js","loggedIn/hs/dictionaryFeed/SecretWordFeedList.js","loggedIn/hs/stripeSetup/UpgradeContainer.js","loggedIn/hs/stripeSetup/UpdateContainer.js","loggedIn/hs/stripeSetup/StripeContainer.js","loggedIn/hs/sponsorships/SponsorAPost.js","loggedIn/hs/sponsorships/outgoingContracts/OGContractsList.js","loggedIn/hs/sponsorships/PostsUSponsor.js","loggedIn/hs/sponsorships/incContracts/IncContractsitem.js","loggedIn/hs/sponsorships/incContracts/IncContractsList.js","loggedIn/hs/sponsorships/SponsoredPosts.js","loggedIn/hs/sponsorships/SScontainer.js","loggedIn/hs/profile/ProfilePostList.js","loggedIn/hs/profile/ProfileContainer.js","loggedIn/pages/HomeScreen.js","App.js","reportWebVitals.js","index.js"],"names":["logoutTimer","AuthContext","createContext","isLoggedIn","userId","token","login","logout","useHttpClient","useState","isLoading","setIsLoading","error","setError","activeHttpRequests","useRef","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrl","AbortController","current","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","useEffect","forEach","abortCtrl","abort","clearError","ModalOverlay","props","content","className","style","headerClass","header","onSubmit","event","preventDefault","contentClass","children","footerClass","footer","ReactDOM","createPortal","document","getElementById","Modal","CSSTransition","in","show","mountOnEnter","unmountOnExit","timeout","classNames","ErrorModal","onCancel","onClear","onClick","LoadingSpinner","asOverlay","src","loading","alt","Homepage","auth","useContext","useForm","register","handleSubmit","isSignupMode","setIsSignupMode","isLoginMode","setIsLoginMode","loginSubmit","data","process","JSON","stringify","username","password","signupSubmit","email","type","FilterFeedBite","query","setQuery","removeTilda","substring","setIsAWord","charAt","crumDictionary","length","findWord","word","definiteWord","definition","aDefinition","etymology","fetchTildadWords","clickWord","setClickWord","toggleWord","setOg","setWord","og","color","map","x","FilterFeedCrum","crumSentence","FilterFeedItem","sentence","dictionaryQuery","split","sentenceDisplay","match","SplashFeedItem","creator","setCreator","postCache","setPostCache","findUser","fetchCreator","hearts","setHearts","postID","Authorization","findHearts","confirmHeart","heartCheck","heartAPost","postId","unheartAPost","aPost","dictionarys","_id","postDate","React","memo","SplashFeedList","posts","post","date","DictionaryItem","dictionaryName","DictionaryList","dictionary","DStarItem","star","DStarList","StarDictionaryWordsItem","StarDictionaryWordsList","love","id","StarPostItem","StarPostList","user","StarsItem","profile","setProfile","setPosts","words","setWords","dictionaryFollowStatus","setDictionaryFollowStatus","dictionaryCheck","setDictionaryCheck","followCheck","setFollowCheck","followingCurrent","following","fetchUserProfile","postsByDate","wordsByDate","setUserFollowStatus","openDictionaryFeed","setOpenDictionaryFeed","openPostFeed","setOpenPostFeed","followUnfollowDictionary","userWithDictionary","userFollowStatus","followAndUnfollowAUser","StarsList","stars","dictionaryStatus","SplashItem","SplashList","WordItem","like","dejuncture","WordList","DefinitionItem","DefinitionList","DictionaryFeedItemDefinition","DictionaryAndNameItem","userAndDictionary","setUserAndDictionary","findUserAndDictionary","fetchUserAndDictionary","DictionaryFeedItem","DictionaryFeedList","SecretWordFeedDefinition","SecretWordFeedItem","SecretWordFeedList","UpgradeContainer","bizType","bizUrl","firstName","lastName","city","state","address","zipCode","dobMonth","month","dobDay","day","dobYear","year","phoneNumber","ssn","isAcct","defaultValue","accEmail","value","UpdateContainer","console","log","cardNumber","expMonth","expYear","CVC","cvc","requestData","setStripeAccount","account","fetchRequirements","stripeAccount","accountToggle","setAccountToggle","togglePaymentType","bizSelector","setBizSelector","handleLastName","setHandleLastName","handleCity","setHandleCity","handleState","setHandleState","handleAddress","setHandleAddress","handleZipCode","setHandleZipCode","handleDob","setHandleDob","dob","handlePhoneNumber","setHandlePhoneNumber","pnInput","setpnInput","pnInputHandler","ssnInput","setsnsInput","ssnInputHandler","updateCard","setUpdateCard","updateCardInputHandler","firstNameInput","setFirstNameInput","toggleFirstName","businessUrlInput","setBusinessUrlInput","toggleBusinessUrlInput","emailInput","setEmailInput","toggleEmailInput","business_type","requirements","currently_due","find","business_profile","individual","first_name","last_name","line1","postal_code","phone","id_number_provided","StripeContainer","isAccount","update","SponsorAPost","socket","io","price","sUser","sponsoree","gav","emit","sponsorshipPost","OGContractsList","ssPosts","setssPosts","findBusPosts","fetchPostSponsorShips","receiver","tookContract","contractedPost","reverse","PostsUSponsor","postsList","userProfile","IncContractsitem","aSponsor","setASponsor","sponsor","company","setCheck","getCompany","check","toString","priceStringLength","dectatePrice","slice","isPosted","acceptSS","contractId","sponsorship","ssInput","setssInput","toggleAcceptButton","IncConctractsList","contracts","contracted","SponsoredPosts","setContracts","findPSS","getContracts","on","prevState","setAcceptSS","IncContractsList","SScontainer","SP","setSP","PUS","setPUS","SAP","setSAP","ProfilePostList","findUserPosts","ProfileContainer","HomeScreen","defaultValues","reset","isSubmitSuccessful","formState","loadedSplashFeed","setLoadedSplashFeed","homeMode","setHomeMode","homeHandler","byDate","fetchSplashFeed","setUrDictionaryMode","setSearchMode","setDictionaryFeedMode","setStripeSignup","setSponsorShips","searchMode","starSearch","setStarSearch","starSearchHandler","setSplashHand1","setWordHand1","setSecretWordHand1","setDictionaryHand1","starData","setStarData","splashHand","setSplashHand","splashHand1","dictionaryHand","setDictionaryHand","dictionaryHand1","wordHand","setWordHand","wordHand1","definitionHand","setDefinitionHand","definitionHand1","setDefinitionHand1","setSecretWordHand","setSecretWordDefinitionHand","setUserProfile","onSubmitSearch","e","search","searchBar","findSplash","findDictionary","findDefinition","findSecretWord","findSecretWordDefinition","target","onSubmitSplash","dictionaryFeedMode","dictionaryFeed","setDictionaryFeed","dictionaryFeedHandler","setSecretDictionaryInputMode","fetchDictionaryFeed","setDictionaryInputMode","secretDictionaryInputMode","dictionaryInputMode","toUpdate","setToUpdate","onSubmitDictionaryWord","createADictionaryCard","findUserFollowing","setFindUserFollowing","findUserFollowers","setFindUserFollowers","setFindUserPosts","findPosts","setDictionaryCreated","setDictionaryNotCreated","dictionaryCreated","dictionaryNotCreated","secretWordList","setSecretWordList","fetchSecretWords","onSubmitSecretWord","theDictionary","theWord","theDefinition","onSubmitNewDictionary","cDictionary","location","reload","stripeSignup","expressSignUp","toggleSponsorShips","toggleProfile","Fragment","stripeBusinessId","placeholder","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","uid","expirationDate","Date","getTime","localStorage","setItem","expiration","toISOString","removeItem","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","to","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.f5d4a8cd.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from 'react';\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(false);\n    const [tokenExpirationDate, setTokenExpirationDate] = useState();\n    const [userId, setUserId] = useState(false);\n\n\n    const login = useCallback((uid, token, expirationDate) => {\n        setToken(token);\n        setUserId(uid);\n\n        const tokenExpirationDate =\n            expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n        setTokenExpirationDate(tokenExpirationDate);\n        localStorage.setItem(\n            'userData',\n            JSON.stringify({\n                userId: uid,\n                token: token,\n                expiration: tokenExpirationDate.toISOString()\n            })\n        );\n    }, []);\n\n    const logout = useCallback(() => {\n        setToken(null);\n        setTokenExpirationDate(null);\n        setUserId(null);\n        localStorage.removeItem('userData');\n    }, []);\n\n    useEffect(() => {\n        if (token && tokenExpirationDate) {\n            const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n            logoutTimer = setTimeout(logout, remainingTime);\n        } else {\n            clearTimeout(logoutTimer);\n        }\n    }, [token, logout, tokenExpirationDate]);\n\n    useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem('userData'));\n        if (\n            storedData &&\n            storedData.token &&\n            new Date(storedData.expiration) > new Date()\n        ) {\n            login(storedData.userId, storedData.token, new Date(storedData.expiration));\n        }\n    }, [login]);\n    return { token, login, logout, userId };\n};","import { createContext } from \"react\"\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    token: null,\n    login: () => { },\n    logout: () => { },\n\n})","import { useState, useCallback, useRef, useEffect } from \"react\";\n\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState();\n\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback(\n        async (url, method = \"GET\", body = null, headers = {}) => {\n            setIsLoading(true);\n            const httpAbortCtrl = new AbortController();\n            activeHttpRequests.current.push(httpAbortCtrl);\n\n            try {\n                const response = await fetch(url, {\n                    method,\n                    body,\n                    headers,\n                    signal: httpAbortCtrl.signal,\n                });\n\n                const responseData = await response.json();\n\n                activeHttpRequests.current = activeHttpRequests.current.filter(\n                    (reqCtrl) => reqCtrl !== httpAbortCtrl\n                );\n\n                if (!response.ok) {\n                    throw new Error(responseData.message);\n                }\n\n                setIsLoading(false);\n                return responseData;\n            } catch (err) {\n                setError(err.message);\n                setIsLoading(false);\n                throw err;\n            }\n        },\n        []\n    );\n\n    const clearError = () => {\n        setError(null);\n    };\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\n        };\n    }, []);\n\n    return { isLoading, error, sendRequest, clearError };\n};","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { CSSTransition } from \"react-transition-group\"\n\n\nconst ModalOverlay = (props) => {\n    const content = (\n        <div className={`modal ${props.className}`} style={props.style}>\n            <header className={`modal__header ${props.headerClass}`}>\n                <h2>{props.header}</h2>\n            </header>\n            <form\n                onSubmit={\n                    props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\n                }\n            >\n                <div className={`modal__content ${props.contentClass}`}>\n                    {props.children}\n                </div>\n                <footer className={`modal__footer ${props.footerClass}`}>\n                    {props.footer}\n                </footer>\n            </form>\n        </div>\n    );\n\n    return ReactDOM.createPortal(content, document.getElementById(\"modal-hook\"));\n}\n\nconst Modal = (props) => {\n    return (\n\n        <CSSTransition\n            in={props.show}\n            mountOnEnter\n            unmountOnExit\n            timeout={200}\n            classNames=\"modal\"\n        >\n            <ModalOverlay {...props} />\n        </CSSTransition>\n\n    )\n}\n\nexport default Modal","import React from \"react\"\n\nimport Modal from \"./Modal\"\n\nconst ErrorModal = props => {\n\n    return (\n        <Modal\n            onCancel={props.onClear}\n            header=\"An Error Occurred!\"\n            show={!!props.error}\n            footer={<button onClick={props.onClear}> okay </button>}\n        >\n            <p>{props.error}</p>\n        </Modal>\n    )\n}\n\nexport default ErrorModal","export default __webpack_public_path__ + \"static/media/opaque_spinner.95c33229.gif\";","import React from \"react\"\nimport loading from \"../../../img/opaque_spinner.gif\"\n\n\n\nconst LoadingSpinner = props => {\n    return (\n        <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n            <img src={loading} alt=\"spinner\" />\n        </div>\n    );\n}\n\nexport default LoadingSpinner","import React, { useState, useContext } from 'react'\n\nimport { AuthContext } from \"../context/auth-context\"\nimport { useHttpClient } from \"../hooks/http-hook\"\nimport { useForm } from \"react-hook-form\"\nimport \"../../css/style.css\"\n\n\nimport ErrorModal from '../components/UIElements/ErrorModal'\nimport LoadingSpinner from '../components/UIElements/LoadingSpinner'\n\n\nconst Homepage = () => {\n\n\n    const auth = useContext(AuthContext)\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const { register, handleSubmit } = useForm()\n\n    const [isSignupMode, setIsSignupMode] = useState(false)\n\n    const [isLoginMode, setIsLoginMode] = useState(false)\n\n\n\n    const homeHandler = () => {\n        setIsLoginMode(false)\n\n        setIsSignupMode(false)\n    }\n\n    const loginHandler = () => {\n        setIsSignupMode(false)\n        setIsLoginMode(true)\n\n    }\n\n    const signupHandler = () => {\n\n        setIsLoginMode(false)\n\n        setIsSignupMode(true)\n    }\n\n    const loginSubmit = async (data) => {\n\n        try {\n            const responseData = await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/login`,\n                \"POST\",\n                JSON.stringify({\n                    username: data.username,\n                    password: data.password\n                }),\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n            auth.login(responseData.userId, responseData.token)\n        } catch (err) {\n\n        }\n    }\n\n    const signupSubmit = async (data) => {\n\n        try {\n            const responseData = await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/signup`,\n                \"POST\",\n                JSON.stringify({\n                    username: data.username,\n                    password: data.password,\n                    email: data.email\n                }),\n                {\n                    \"Content-Type\": \"application/json\"\n                }\n            )\n            auth.login(responseData.userId, responseData.token)\n        } catch (err) {\n\n        }\n    }\n\n\n\n\n    return (\n        <div>\n            <header className=\"home--toolbar\">\n                <button onClick={homeHandler} className=\"home--logo\"> dictionary</button>\n                <button onClick={loginHandler} className=\"home--login\"> login</button>\n                <button onClick={signupHandler} className=\"home--signup\"> signup</button>\n\n            </header>\n            <header className=\"home--note\">\n                mobile app coming soon!\n\n            </header>\n            {/* <img src={hpimg} alt=\"dictionary home page\" className=\"home\" /> */}\n            <h1 className=\"home--header\"> Nothing is impossible for you </h1>\n            <ErrorModal error={error} onClear={clearError} />\n            {isLoading && <LoadingSpinner asOverlay />}\n            {isSignupMode &&\n                <div className=\"home--signupmode\">\n                    <form onSubmit={handleSubmit(signupSubmit)}>\n                        <label>star</label>\n                        <br />\n                        <input\n                            {...register(\"username\")} />\n\n                        <br />\n                        <label>password</label>\n                        <br />\n                        <input\n                            {...register(\"password\")}\n                            type=\"password\"\n                        />\n                        <br />\n                        <label>email</label>\n                        <br />\n                        <input\n                            {...register(\"email\")} />\n\n                        <br />\n                        <button>signup</button>\n                    </form>\n                </div>\n            }\n            {isLoginMode &&\n                <div className=\"home--loginmode\">\n                    <form onSubmit={handleSubmit(loginSubmit)}>\n                        star <br />\n                        <input\n                            {...register(\"username\")}\n                        />\n                        <br />\n                        password<br />\n                        <input\n                            {...register(\"password\")}\n                            type=\"password\"\n                        /><br />\n                        <button>login</button>\n                    </form>\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default Homepage\n","import React, { useState, useEffect } from 'react'\n\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\n\nimport \"../../../css/style.css\"\n\nconst FilterFeedBite = (props) => {\n\n\n\n    const [query, setQuery] = useState()\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    const removeTilda = props.query.substring(1)\n\n    const [isAWord, setIsAWord] = useState()\n\n    useEffect(() => {\n\n        if (props.query.charAt(0) === \"~\") {\n            const fetchTildadWords = async () => {\n                try {\n                    const responseData = await sendRequest(\n                        `${process.env.REACT_APP_BACKEND_URL}/user/dictionarySWQuery/${removeTilda}/${props.crumDictionary}`\n                    )\n\n\n\n                    if (responseData.length > 0) {\n                        setIsAWord(\"is a word\")\n                    }\n\n                    responseData.findWord.length === 1 ? setQuery(responseData.findWord[0]) : setQuery({\n                        word: { definiteWord: \"thats not a word\" },\n                        definition: [\n                            { aDefinition: \"that doesnt have a definition\" },],\n                        etymology: \"unknown\"\n\n                    })\n                } catch (err) {\n\n                }\n\n\n\n\n            }\n\n            fetchTildadWords()\n\n        }\n\n    }, [sendRequest, props.crumDictionary, props.query, removeTilda])\n\n\n\n    // useEffect(() => {\n\n\n    //     const fetchTildadWords = async () => {\n    //         try {\n    //             const responseData = await sendRequest(\n    //                 `${process.env.REACT_APP_BACKEND_URL}/user/dictionarySWQuery/${props.query}/${props.crumDictionary}`\n    //             )\n\n    //         } catch (err) {\n\n    //         }\n\n\n\n    //     }\n\n    //     fetchTildadWords()\n\n\n\n    // }, [sendRequest, props.crumDictionary, props.query])\n\n    const [clickWord, setClickWord] = useState()\n\n    const toggleWord = async () => {\n        // if (clickWord === true) {\n        //     setClickWord(false)\n        // } else if (clickWord === false) {\n\n        // }\n\n\n\n        setOg(false)\n        setClickWord(true)\n        setWord(true)\n\n\n    }\n\n    const toggleWordDown = () => {\n        setClickWord(false)\n        setWord(false)\n        setOg(true)\n    }\n\n\n    const [og, setOg] = useState(true)\n\n    const [word, setWord] = useState();\n\n\n\n\n\n    return (<span>\n\n        { word &&\n            <span onClick={toggleWordDown}>\n                {\n                    clickWord &&\n                    <div className=\"tildaWord\">\n                        <span className=\"tildaWord-relative\">\n                            <div className=\"tildaWord-inside\">\n                                <div className=\"tildaWord-fullwidth\" style={{ color: \"rgb(3, 177, 235)\" }}>\n                                    {query.word.definiteWord}\n                                </div>\n                                <div>\n                                    {query.definition.map((x) =>\n                                        <div className=\"tildaWord-fullwidth\">- {x.aDefinition} </div>\n                                    )}\n                                </div>\n                                <div className=\"tildaWord-fullwidth\"><span className=\"dictionaryFeed-origin\">-ORIGIN&nbsp;</span>{query.etymology}</div>\n                            </div>\n                        </span>\n                    </div>\n                }\n                {props.query}&nbsp;\n        </span>}\n        { og &&\n            <span onClick={toggleWord}>\n\n                {props.query}&nbsp;\n        </span>}\n    </span>\n    )\n}\n\nexport default FilterFeedBite\n","import React from 'react'\nimport FilterFeedBite from './FilterFeedBite'\n\nconst FilterFeedCrum = (props) => {\n\n\n\n    return (\n        <div>\n            {props.crumSentence.map((x) =>\n                <span>\n                    <FilterFeedBite\n                        query={x}\n                        crumDictionary={props.crumDictionary}\n                    />\n                </span>\n            )}\n        </div>\n    )\n}\n\nexport default FilterFeedCrum\n","import React, { useEffect, useState } from 'react'\n\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\nimport FilterFeedCrum from './FilterFeedCrum'\n\nconst FilterFeedItem = (props) => {\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    const [filteredItem, setFilteredItem] = useState()\n\n\n    // yourText.split(' ').filter(v=> v.startsWith('#'))\n\n\n    const aPost = props.sentence\n\n    useEffect(() => {\n\n\n        const fetchTildadWords = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/dictionarySWQuery/`\n                )\n\n            } catch (err) {\n\n            }\n        }\n\n\n\n    }, [])\n\n\n\n\n\n\n    const dictionaryQuery = props.sentence.split(\" \")\n\n    const onlyTildad = dictionaryQuery.filter(x => x.charAt(0) === \"~\")\n\n\n\n    const hi = props.sentence.match(/~[a-z]+/gi);\n\n\n\n\n    const sentenceDisplay = hi ? (<div>\n        <FilterFeedCrum\n            crumSentence={dictionaryQuery}\n            crumDictionary={props.crumDictionary}\n\n        />\n    </div>) : (<div>\n        {props.sentence}\n    </div>)\n\n    return (\n        <div>\n            {sentenceDisplay}\n        </div>\n    )\n\n\n\n}\n\nexport default FilterFeedItem\n","import React, { useEffect, useContext, useRef, useState } from 'react'\n\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\nimport { AuthContext } from \"../../../shared/context/auth-context\"\n\nimport \"../../../css/style.css\"\nimport FilterFeedItem from './FilterFeedItem'\nimport Modal from '../../../shared/components/UIElements/Modal'\nimport ErrorModal from '../../../shared/components/UIElements/ErrorModal'\n\n\n\n\nconst SplashFeedItem = (props) => {\n\n    const auth = useContext(AuthContext)\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [creator, setCreator] = useState()\n\n    const [postCache, setPostCache] = useState()\n\n\n    useEffect(() => {\n\n\n        const fetchCreator = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/findPostCreator/${props.creator}`,\n\n\n                )\n                setCreator(responseData.findUser)\n\n            } catch (err) {\n\n            }\n\n        }\n\n        fetchCreator()\n\n    }, [sendRequest, props.creator])\n\n\n    const [hearts, setHearts] = useState()\n\n    useEffect(() => {\n\n        const findHearts = async () => {\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/getHeartCount/${props.postID}`,\n                    \"GET\",\n                    null,\n                    {\n\n                        Authorization: 'Bearer ' + auth.token\n\n                    }\n                )\n\n                setHearts(responseData.hearts)\n\n\n\n            } catch (err) {\n\n            }\n\n\n        }\n\n        findHearts()\n\n    }, [props.postID, auth.token, sendRequest])\n\n\n    useEffect(() => {\n\n      \n\n        const heartCheck = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/checkIfHearted/${props.postID}`,\n                    \"GET\",\n                    null,\n                    {\n\n                        Authorization: 'Bearer ' + auth.token\n\n                    }\n                )\n                if (responseData.confirmHeart.length > 0) {\n                    setPostCache(true)\n                } else {\n                    setPostCache(false)\n                }\n\n            } catch (err) {\n\n            }\n        }\n        heartCheck()\n\n\n\n\n\n\n    }, [auth.token, props.postID, sendRequest])\n\n\n    const heartAPost = async () => {\n\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/heartAPost`,\n                \"POST\",\n                JSON.stringify({\n                    postId: props.postID\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n\n                }\n\n            )\n\n        } catch (err) {\n\n        }\n\n        const findHearts = async () => {\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/getHeartCount/${props.postID}`,\n                    \"GET\",\n                    null,\n                    {\n\n                        Authorization: 'Bearer ' + auth.token\n\n                    }\n                )\n\n                setHearts(responseData.hearts)\n\n                \n            } catch (err) {\n\n            }\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/checkIfHearted/${props.postID}`,\n                    \"GET\",\n                    null,\n                    {\n\n                        Authorization: 'Bearer ' + auth.token\n\n                    }\n                )\n                if (responseData.confirmHeart) {\n                    setPostCache(true)\n                } else {\n                    setPostCache(false)\n                }\n\n            } catch (err) {\n\n            }\n\n        }\n\n        findHearts()\n\n    }\n\n    const unheartAPost = async () => {\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/unheartAPost/${props.postID}`,\n                \"DELETE\",\n                null,\n                {\n\n                    Authorization: 'Bearer ' + auth.token\n\n                }\n            )\n        } catch (err) {\n\n        }\n\n        const findHearts = async () => {\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/getHeartCount/${props.postID}`,\n                    \"GET\",\n                    null,\n                    {\n\n                        Authorization: 'Bearer ' + auth.token\n\n                    }\n                )\n\n                setHearts(responseData.hearts)\n\n               \n            } catch (err) {\n\n            }\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/checkIfHearted/${props.postID}`,\n                    \"GET\",\n                    null,\n                    {\n\n                        Authorization: 'Bearer ' + auth.token\n\n                    }\n                )\n                if (responseData.confirmHeart) {\n                    setPostCache(true)\n                } else {\n                    setPostCache(false)\n                }\n\n            } catch (err) {\n\n            }\n\n        }\n\n        findHearts()\n    }\n\n\n\n    return (\n\n\n        <div className=\"posts\">\n\n            { creator &&\n\n                <div className=\"posts--borderSet\">\n                    <div>{creator.username}</div>\n                    <div><FilterFeedItem\n\n                        sentence={props.aPost}\n                        crumDictionary={creator.dictionarys[0]._id}\n                    /></div>\n                    <div>\n                        <div>\n\n\n\n\n                            {hearts &&\n\n                                <div><span>\n\n                                    {!postCache &&\n                                        <span onClick={heartAPost}>♡</span>}\n                                    {postCache &&\n                                        <span onClick={unheartAPost}> &#10084;&#65039;\n                                         </span>} \n\n                                         &nbsp;{hearts.length} </span>\n                                </div>\n                            }\n\n\n                        </div>\n\n                    </div>\n\n                    <div>{props.postDate}</div>\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default React.memo(SplashFeedItem)\n","import React, { useState, useEffect } from 'react'\nimport SplashFeedItem from './SplashFeedItem'\n\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\n\n\nimport \"../../../css/style.css\"\n\nconst SplashFeedList = (props) => {\n\n\n\n\n    return (\n        <div className=\"splashes\">\n            {props.posts.map((data) =>\n                <SplashFeedItem\n                    key={data._id}\n                    postID={data._id}\n                    creator={data.creator}\n                    aPost={data.post}\n                    postDate={data.date}\n                    hearts={data.hearts}\n\n                />\n            )}\n        </div>\n    )\n}\n\nexport default SplashFeedList\n","import React from 'react'\n\nconst DictionaryItem = (props) => {\n    return (\n        <div>\n            <div>{props.dictionaryName}</div>\n        </div>\n    )\n}\n\nexport default DictionaryItem\n","import React from 'react'\nimport DictionaryItem from './DictionaryItem'\n\nconst DictionaryList = (props) => {\n    return (\n        <div>\n            { props.dictionary.map((data) =>\n                <DictionaryItem\n                    dictionaryName={data.dictionaryName}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default DictionaryList\n","import React from 'react'\nimport DictionaryList from './DictionaryList'\n\nconst DStarItem = (props) => {\n    return (\n        <div>\n            <div>{props.star}</div>\n            <DictionaryList\n                dictionary={props.dictionary}\n            />\n        </div>\n    )\n}\n\nexport default DStarItem\n","import React from 'react'\nimport DStarItem from './DStarItem'\n\nconst DStarList = (props) => {\n    return (\n        <div className=\"dictionarys--list\">\n            {props.star.map((data) =>\n                <DStarItem\n                    key={data._id}\n                    star={data.username}\n                    dictionary={data.dictionarys}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default DStarList\n","import React from 'react'\n\nconst StarDictionaryWordsItem = (props) => {\n    return (\n        <div>\n            <div>\n                {props.word.definiteWord}\n            </div>\n            <div>\n                {props.definition.map((x) =>\n                    <div>\n                        -{x.aDefinition}\n                    </div>\n                )}\n            </div>\n            <div>-ORIGIN {props.etymology}</div>\n            <div>{props.date}</div>\n\n        </div>\n    )\n}\n\nexport default StarDictionaryWordsItem\n","import React from 'react'\nimport StarDictionaryWordsItem from './StarDictionaryWordsItem'\n\nconst StarDictionaryWordsList = (props) => {\n    return (\n        <div className>\n            {props.love.map((x) =>\n                <StarDictionaryWordsItem\n                    id={x._id}\n                    key={x._id}\n                    word={x.word}\n                    definition={x.definition}\n                    etymology={x.etymology}\n                    date={x.date}\n                    dictionary={props.dictionary}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default StarDictionaryWordsList\n","import React from 'react'\n\nconst StarPostItem = (props) => {\n    return (\n        <div>\n            <div>{props.username}</div>\n            <div>{props.post}</div>\n            <div>{props.date}</div>\n        </div>\n    )\n}\n\nexport default StarPostItem\n","import React from 'react'\nimport StarPostItem from './StarPostItem'\n\nimport \"../../../../css/style.css\"\n\nconst StarPostList = (props) => {\n    return (\n        <div className=\"starSearchSplashes\">\n            {props.love.map((x) =>\n                <StarPostItem\n                    username={props.user}\n                    key={x._id}\n                    id={x._id}\n                    post={x.post}\n                    date={x.date}\n\n                />\n            )}\n        </div>\n    )\n}\n\nexport default StarPostList\n","import React, { useContext, useEffect, useState } from 'react'\n\nimport { AuthContext } from \"../../../../shared/context/auth-context\"\nimport { useHttpClient } from '../../../../shared/hooks/http-hook'\nimport StarDictionaryWordsList from './StarDictionaryWordsList'\nimport StarPostList from './StarPostList'\n\nconst StarsItem = (props) => {\n\n    const auth = useContext(AuthContext)\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [profile, setProfile] = useState()\n\n    const [posts, setPosts] = useState()\n\n    const [words, setWords] = useState()\n\n    const [dictionaryFollowStatus, setDictionaryFollowStatus] = useState()\n\n    const [dictionaryCheck, setDictionaryCheck] = useState()\n\n    const [followCheck, setFollowCheck] = useState()\n\n    useEffect(() => {\n        const fetchUserProfile = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/userProfile`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                setFollowCheck(responseData.findUser.followingCurrent)\n\n                setDictionaryCheck(responseData.findUser.following)\n\n                // if (profile && dictionaryCheck) {\n                //     const getStatus = dictionaryCheck.filter(x => `${profile.dictionarys[0]._id}` === `${x}`)\n\n                //     if (getStatus.length === 0) {\n                //         setDictionaryFollowStatus(\"Follow\")\n\n                //     } else {\n                //         setDictionaryFollowStatus(\"Unfollow\")\n                //     }\n\n                // }\n\n\n            } catch (err) {\n\n            }\n        }\n\n        fetchUserProfile()\n\n\n\n\n    }, [sendRequest, auth.token])\n\n    useEffect(() => {\n        const fetchUserProfile = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/searchAUser/${props.star}`\n                )\n                setProfile(responseData.findUser[0])\n                setPosts(responseData.postsByDate)\n                setWords(responseData.wordsByDate)\n\n\n\n            } catch (err) {\n\n            }\n\n        }\n        fetchUserProfile()\n\n\n    }, [sendRequest, props.star])\n\n    useEffect(() => {\n\n        if (profile && followCheck) {\n            const getStatus = followCheck.filter(x => `${profile._id}` === `${x}`)\n\n            if (getStatus.length === 0) {\n                setUserFollowStatus(\"Follow\")\n            } else {\n                setUserFollowStatus(\"Unfollow\")\n            }\n        }\n\n    }, [profile, followCheck])\n\n\n\n\n\n    // useEffect(() => {\n\n    //     if (profile) {\n    //         const getStatus = props.dictionaryStatus.filter(x => `${profile.dictionarys[0]._id}` === `${x}`)\n\n    //         if (getStatus.length === 0) {\n    //             setDictionaryFollowStatus(\"Follow\")\n\n    //         } else {\n    //             setDictionaryFollowStatus(\"Unfollow\")\n    //         }\n\n    //     }\n\n    // }, [profile, props.dictionaryStatus])\n\n\n\n    //console.log(props.dictionaryStatus)\n\n    const [openDictionaryFeed, setOpenDictionaryFeed] = useState()\n\n    const [openPostFeed, setOpenPostFeed] = useState(true)\n\n    const toggleDictionaryFeed = () => {\n        setOpenPostFeed(false)\n        setOpenDictionaryFeed(true)\n    }\n\n    const togglePostFeed = () => {\n        setOpenDictionaryFeed(false)\n        setOpenPostFeed(true)\n    }\n\n    const [dictionaryStatus, setDictionaryStatus] = useState()\n\n    useEffect(() => {\n\n\n        if (profile && dictionaryCheck) {\n            const getStatus = dictionaryCheck.filter(x => `${profile.dictionarys[0]._id}` === `${x}`)\n\n            if (getStatus.length === 0) {\n                setDictionaryFollowStatus(\"Follow\")\n\n            } else {\n                setDictionaryFollowStatus(\"Unfollow\")\n            }\n\n        }\n\n\n    }, [dictionaryCheck, profile])\n\n\n\n    const followUnfollowDictionary = async () => {\n\n\n        if (dictionaryFollowStatus === \"Follow\") {\n            try {\n                await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/followADictionary`,\n                    \"POST\",\n                    JSON.stringify({\n                        dictionary: profile.dictionarys[0]._id,\n                        userWithDictionary: profile._id\n                    }),\n                    {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n\n\n\n\n\n                const fetchUserProfile = async () => {\n                    try {\n                        const responseData = await sendRequest(\n                            `${process.env.REACT_APP_BACKEND_URL}/user/userProfile`,\n                            \"GET\",\n                            null,\n                            {\n                                Authorization: 'Bearer ' + auth.token\n                            }\n                        )\n\n                        setDictionaryCheck(responseData.findUser.following)\n\n\n\n\n                    } catch (err) {\n\n                    }\n                }\n\n                fetchUserProfile()\n\n                setDictionaryFollowStatus(\"Unfollow\")\n\n                // try {\n                //     const responseData = await sendRequest(\n                //         `${process.env.REACT_APP_BACKEND_URL}/user/searchAUser/${props.star}`\n                //     )\n                //     const dictionaryStuff = responseData.findUser[0]\n\n                //     const getStatus = props.dictionaryStatus.filter(x => `${dictionaryStuff.dictionarys[0]._id}` === `${x}`)\n\n                //     if (getStatus === 0) {\n                //         setDictionaryFollowStatus(\"Follow\")\n\n                //     } else {\n                //         setDictionaryFollowStatus(\"Unfollow\")\n                //     }\n                // } catch (err) {\n\n                // }\n\n            } catch (err) {\n\n            }\n        } else if (dictionaryFollowStatus === \"Unfollow\") {\n            try {\n                await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/unfollow/${profile.dictionarys[0]._id}/${profile._id}`,\n                    \"DELETE\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n            } catch (err) {\n\n            }\n\n            const fetchUserProfile = async () => {\n                try {\n                    const responseData = await sendRequest(\n                        `${process.env.REACT_APP_BACKEND_URL}/user/userProfile`,\n                        \"GET\",\n                        null,\n                        {\n                            Authorization: 'Bearer ' + auth.token\n                        }\n                    )\n\n                    setDictionaryCheck(responseData.findUser.following)\n\n\n\n\n                } catch (err) {\n\n                }\n            }\n\n            fetchUserProfile()\n\n            setDictionaryFollowStatus(\"Follow\")\n        }\n\n\n    }\n\n    const [userFollowStatus, setUserFollowStatus] = useState()\n\n\n    const followAndUnfollowAUser = async () => {\n\n        if (userFollowStatus === \"Follow\") {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/currentAUser`,\n                \"POST\",\n                JSON.stringify({\n                    userId: profile._id\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n\n\n            const fetchUserProfile = async () => {\n                try {\n                    const responseData = await sendRequest(\n                        `${process.env.REACT_APP_BACKEND_URL}/user/userProfile`,\n                        \"GET\",\n                        null,\n                        {\n                            Authorization: 'Bearer ' + auth.token\n                        }\n                    )\n\n                    setFollowCheck(responseData.findUser.followingCurrent)\n\n\n\n\n                } catch (err) {\n\n                }\n            }\n\n            fetchUserProfile()\n\n        } else if (userFollowStatus === \"Unfollow\") {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/uncurrentAUser/${profile._id}`,\n                \"DELETE\",\n                null,\n                {\n                    Authorization: 'Bearer ' + auth.token\n                }\n\n            )\n\n            const fetchUserProfile = async () => {\n                try {\n                    const responseData = await sendRequest(\n                        `${process.env.REACT_APP_BACKEND_URL}/user/userProfile`,\n                        \"GET\",\n                        null,\n                        {\n                            Authorization: 'Bearer ' + auth.token\n                        }\n                    )\n\n                    setFollowCheck(responseData.findUser.followingCurrent)\n\n\n\n\n                } catch (err) {\n\n                }\n            }\n\n            fetchUserProfile()\n        }\n\n\n\n    }\n\n\n\n\n    return (\n        <div>\n            { profile &&\n                <div>\n                    <div>\n                        <h2 onClick={togglePostFeed}>{profile.username}</h2>\n                        <button onClick={followAndUnfollowAUser}>{userFollowStatus}</button>\n                        <h4 onClick={toggleDictionaryFeed}>{profile.dictionarys[0].dictionaryName}</h4>\n                        {\n                            dictionaryFollowStatus &&\n\n                            <button onClick={followUnfollowDictionary}> {dictionaryFollowStatus} </button>}\n                        {words &&\n                            openDictionaryFeed &&\n\n                            <div>\n                                <StarDictionaryWordsList love={words} dictionary={profile.dictionarys[0].dictionaryName} />\n                            </div>\n\n                        }\n                    </div>\n                    <div>\n                        {posts && openPostFeed &&\n                            <div>\n                                <StarPostList love={posts} user={profile.username} />\n                            </div>\n                        }\n                    </div>\n                </div>\n            }\n        </div>\n    )\n\n}\n\nexport default StarsItem\n","import React from 'react'\nimport StarsItem from './StarsItem'\n\nimport \"../../../../css/style.css\"\n\nconst StarsList = (props) => {\n\n\n\n    return (\n        <div className=\"star--list\">\n            {props.stars.map((data) =>\n                <StarsItem\n\n                    key={data._id}\n                    star={data.username}\n                    dictionaryStatus={props.dictionaryStatus}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default StarsList\n","import React from 'react'\n\nconst SplashItem = (props) => {\n    return (\n        <div>\n            <div>\n                {props.post}\n            </div>\n\n            <div>\n                {props.date}\n            </div>\n        </div>\n    )\n}\n\nexport default SplashItem\n","import React from 'react'\nimport SplashItem from './SplashItem'\n\nimport \"../../../../css/style.css\"\n\nconst SplashList = (props) => {\n    return (\n        <div className=\"splash--list\">\n            {props.posts.map((data) =>\n                <SplashItem\n                    key={data._id}\n\n                    post={data.post}\n                    date={data.date}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default SplashList\n","import React from 'react'\n\nconst WordItem = (props) => {\n    return (\n        <div>\n            <div>{props.word}</div>\n            <div>{props.like} 👍</div>\n            <div>{props.dejuncture}🐍 </div>\n        </div>\n    )\n}\n\nexport default WordItem\n","import React from 'react'\nimport WordItem from './WordItem'\n\nconst WordList = (props) => {\n    return (\n        <div className=\"word--list\">\n            {props.words.map((data) =>\n                <WordItem\n                    key={data._id}\n                    word={data.word.definiteWord}\n                    like={data.like.length}\n                    dejuncture={data.dejuncture.length}\n                    dictionary={data.dictionary}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default WordList\n","import React from 'react'\n\nconst DefinitionItem = (props) => {\n    return (\n        <div>\n            <div>{props.word}</div>\n        </div>\n    )\n}\n\nexport default DefinitionItem\n","import React from 'react'\nimport DefinitionItem from './DefinitionItem'\n\nimport \"../../../../css/style.css\"\n\nconst DefinitionList = (props) => {\n    return (\n        <div className=\"definitions\">\n            {props.words.map((data) =>\n                <DefinitionItem\n                    key={data._id}\n                    word={data.word.definiteWord}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default DefinitionList\n","import React from 'react'\n\nconst DictionaryFeedItemDefinition = (props) => {\n    return (\n        <div>\n            <div className=\" dictionaryFeed-definitionAndOrigin\">- {props.aDefinition}</div>\n        </div>\n    )\n}\n\nexport default DictionaryFeedItemDefinition\n","import React, { useState, useContext, useEffect } from 'react'\n\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\nimport { AuthContext } from \"../../../shared/context/auth-context\"\n\n\nconst DictionaryAndNameItem = (props) => {\n\n    const auth = useContext(AuthContext)\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [userAndDictionary, setUserAndDictionary] = useState()\n\n\n\n    useEffect(() => {\n        const fetchUserAndDictionary = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/getDictionaryAndUser/${props.dictionary}`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                //console.log(responseData)\n                setUserAndDictionary(responseData.findUserAndDictionary[0])\n\n            } catch (err) {\n\n            }\n\n\n\n        }\n\n\n        fetchUserAndDictionary()\n\n    }, [sendRequest, auth.token, props.dictionary])\n\n\n    return (\n        <div>\n            {!isLoading && userAndDictionary && <div>\n                <div>{userAndDictionary.dictionarys[0].dictionaryName}</div>\n                <div>{userAndDictionary.username}</div>\n            </div>\n            }\n        </div>\n\n    )\n}\n\nexport default DictionaryAndNameItem\n","import React, { useEffect, useContext, useState } from 'react'\nimport DictionaryFeedItemDefinition from './DictionaryFeedItemDefinition'\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\nimport { AuthContext } from \"../../../shared/context/auth-context\"\nimport DictionaryAndNameItem from './DictionaryAndNameItem'\n\nconst DictionaryFeedItem = (props) => {\n\n\n    const auth = useContext(AuthContext)\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [userAndDictionary, setUserAndDictionary] = useState()\n\n\n\n    // useEffect(() => {\n    //     const fetchUserAndDictionary = async () => {\n    //         try {\n    //             const responseData = await sendRequest(\n    //                 `${process.env.REACT_APP_BACKEND_URL}/user/getDictionaryAndUser/${props.dictionary}`,\n    //                 \"GET\",\n    //                 null,\n    //                 {\n    //                     Authorization: 'Bearer ' + auth.token\n    //                 }\n    //             )\n\n    //             //console.log(responseData)\n    //             setUserAndDictionary(responseData)\n\n    //         } catch (err) {\n\n    //         }\n\n\n\n    //     }\n\n\n    //     fetchUserAndDictionary()\n\n    // }, [sendRequest, auth.token, props.dictionary])\n\n    return (\n        <div>\n            <h3 style={{ color: \"rgb(3, 177, 235)\" }}>{props.word}</h3>\n            {props.definition.map((data) =>\n                <DictionaryFeedItemDefinition\n                    key={data._id}\n                    aDefinition={data.aDefinition}\n                />\n            )}\n            <div className=\" dictionaryFeed-definitionAndOrigin\"><label className=\"dictionaryFeed-origin\">-ORIGIN</label> {props.etymology}</div>\n            <div>{props.date}</div>\n            <DictionaryAndNameItem dictionary={props.dictionary} />\n        </div>\n    )\n}\n\nexport default DictionaryFeedItem\n","import React, { useContext, useState, useEffect } from 'react'\nimport DictionaryFeedItem from './DictionaryFeedItem'\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\nimport { AuthContext } from \"../../../shared/context/auth-context\"\n\nimport \"../../../css/style.css\"\n\nconst DictionaryFeedList = (props) => {\n\n\n    const auth = useContext(AuthContext)\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    const [userAndDictionary, setUserAndDictionary] = useState()\n\n    // useEffect(() => {\n    //     const fetchUserAndDictionary = async () => {\n    //         try {\n    //             const responseData = await sendRequest(\n    //                 `${process.env.REACT_APP_BACKEND_URL}/user/getDictionaryAndUser/${props.words.map(x => x.dictionary)}`,\n    //                 \"GET\",\n    //                 null,\n    //                 {\n    //                     Authorization: 'Bearer ' + auth.token\n    //                 }\n    //             )\n\n\n    //             setUserAndDictionary(responseData[0])\n    //             console.log(userAndDictionary)\n    //         } catch (err) {\n\n    //         }\n\n\n\n    //     }\n\n\n    //     fetchUserAndDictionary()\n\n    // }, [sendRequest, auth.token, props.words, userAndDictionary])\n\n\n    return (\n        <div className=\"dictionaryFeed\">\n            {props.words.map((data) =>\n                <DictionaryFeedItem\n                    key={data._id}\n                    word={data.word.definiteWord}\n                    definition={data.definition}\n                    etymology={data.etymology}\n                    dictionary={data.dictionary}\n                    date={data.date}\n\n                />\n            )}\n        </div>\n    )\n}\n\nexport default DictionaryFeedList\n","import React from 'react'\n\nconst SecretWordFeedDefinition = (props) => {\n    return (\n        <div>\n            <div> - {props.definition}</div>\n        </div>\n    )\n}\n\nexport default SecretWordFeedDefinition\n","import React from 'react'\nimport SecretWordFeedDefinition from './SecretWordFeedDefinition'\n\nconst SecretWordFeedItem = (props) => {\n    return (\n        <div>\n            <div style={{ color: \"rgb(3, 177, 235)\" }}>{props.word}</div>\n            <div><SecretWordFeedDefinition definition={props.definition} /> </div>\n            <div>{props.date}</div>\n        </div>\n    )\n}\n\nexport default SecretWordFeedItem\n","import React from 'react'\nimport SecretWordFeedItem from './SecretWordFeedItem'\n\nconst SecretWordFeedList = (props) => {\n    return (\n        <div className=\"dictionaryFeed\">\n            {props.words.map((data) =>\n                <SecretWordFeedItem\n                    key={data._id}\n                    definition={data.definition}\n                    word={data.word}\n                    date={data.date}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default SecretWordFeedList\n","import React, { useContext } from 'react'\nimport { useForm } from \"react-hook-form\"\n\n\nimport { AuthContext } from \"../../../shared/context/auth-context\"\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\n\nimport \"../../../css/style.css\"\n\nconst UpgradeContainer = (props) => {\n\n    const auth = useContext(AuthContext)\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    const { register, handleSubmit } = useForm()\n\n\n    const onSubmit = async (data) => {\n\n\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/upgradeToBusiness`,\n                \"POST\",\n                JSON.stringify({\n                    email: data.email,\n                    bizType: data.bizType,\n                    bizUrl: data.bizUrl,\n                    firstName: data.firstName,\n                    lastName: data.lastName,\n                    city: data.city,\n                    state: data.state,\n                    address: data.address,\n                    zipCode: data.zipCode,\n                    dobMonth: data.month,\n                    dobDay: data.day,\n                    dobYear: data.year,\n                    phoneNumber: data.phoneNumber,\n                    ssn: data.ssn\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n\n                }\n            )\n            props.isAcct(\"2\")\n\n\n\n        } catch (err) {\n\n        }\n\n\n\n    }\n\n\n\n\n\n    return (\n        <div className=\"stripe-setup\">\n\n            <form>\n\n                <label>email:</label>\n                <br />\n                <input {...register(\"email\")} defaultValue={props.accEmail} />\n                <br />\n                business\n                <br />\n                <select {...register(\"bizType\")}>\n                    <option value=\"individual\">individual</option>\n                    <option value=\"company\">company</option>\n                    <option value=\"non_profit\">non profit</option>\n                    <option value=\"government_entity\">government organization</option>\n                </select>\n                <br />\n\n                <button onClick={handleSubmit(onSubmit)}> submit</button>\n\n            </form>\n\n\n        </div>\n    )\n}\n\nexport default UpgradeContainer\n","import React, { useContext, useEffect, useState } from 'react'\n\nimport { useForm } from \"react-hook-form\"\n\n\nimport { AuthContext } from \"../../../shared/context/auth-context\"\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\n\nimport \"../../../css/style.css\"\nimport LoadingSpinner from '../../../shared/components/UIElements/LoadingSpinner'\nimport ErrorModal from '../../../shared/components/UIElements/ErrorModal'\n\n\nconst UpdateContainer = (props) => {\n\n\n    const auth = useContext(AuthContext)\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    const { register, handleSubmit } = useForm()\n\n\n    const onSubmit = async (data) => {\n\n        console.log(data.cardNumber)\n\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/updateBizDetails`,\n                \"POST\",\n                JSON.stringify({\n                    email: data.email,\n                    bizType: data.bizType,\n                    bizUrl: data.bizUrl,\n                    firstName: data.firstName,\n                    lastName: data.lastName,\n                    city: data.city,\n                    state: data.state,\n                    address: data.address,\n                    zipCode: data.zipCode,\n                    dobMonth: data.month,\n                    dobDay: data.day,\n                    dobYear: data.year,\n                    phoneNumber: data.phoneNumber,\n                    ssn: data.ssn,\n                    cardNumber: data.cardNumber,\n                    expMonth: data.expMonth,\n                    expYear: data.expYear,\n                    CVC: data.cvc\n\n\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n\n                }\n            )\n\n\n\n\n        } catch (err) {\n\n        }\n\n        const fetchRequirements = async () => {\n            try {\n                const requestData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/retrieveStripeAcct`,\n                    \"GET\",\n                    null,\n                    {\n\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n\n                setStripeAccount(requestData.account)\n\n\n\n            } catch (err) {\n\n            }\n        }\n\n        fetchRequirements()\n\n\n\n    }\n\n    const [stripeAccount, setStripeAccount] = useState()\n\n    const [hasFirstName, setHasFirstName] = useState(true)\n\n    const editFirstName = () => {\n        setHasFirstName(false)\n    }\n\n    useEffect(() => {\n\n        const fetchRequirements = async () => {\n            try {\n                const requestData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/retrieveStripeAcct`,\n                    \"GET\",\n                    null,\n                    {\n\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n\n                setStripeAccount(requestData.account)\n\n\n\n            } catch (err) {\n\n            }\n        }\n\n        fetchRequirements()\n\n    }, [sendRequest, auth.token])\n\n\n    const [accountToggle, setAccountToggle] = useState(true)\n\n\n    const submitCard = () => { }\n\n    const submitBankAccount = async () => {\n\n        try {\n            await sendRequest(\n\n            )\n        } catch (err) {\n\n        }\n\n    }\n\n    const togglePaymentType = () => {\n\n        if (accountToggle === false) {\n            setAccountToggle(true)\n            \n        } else if (accountToggle === true) {\n            setAccountToggle(false)\n        }\n        \n    }\n\n    const [bizSelector, setBizSelector] = useState()\n\n    const selectorList = () => {\n        if (bizSelector === false) {\n            setBizSelector(true)\n        } else if (bizSelector === true) {\n            setBizSelector(false)\n        }\n\n    }\n\n\n   \n\n    const [handleBizUrl, setHandleBizUrl] = useState(false)\n\n\n    const bizUrl = () => {\n\n    }\n\n    const [handleFirstName, setHandleFirstName] = useState(false)\n\n    const firstName = () => {\n\n    }\n\n    const [handleLastName, setHandleLastName] = useState(false)\n\n    const lastName = () => {\n        if (handleLastName === false) {\n            setHandleLastName(true)\n        } else if (handleLastName === true) {\n            setHandleLastName(false)\n        }\n    }\n\n    const [lnInput, setlnInput] = useState()\n\n    const [handleCity, setHandleCity] = useState(false)\n\n    const city = () => {\n        if (handleCity === false) {\n            setHandleCity(true)\n        } else if (handleCity === true) {\n            setHandleCity(false)\n        }\n    }\n\n    const [cInput, setcInput] = useState()\n\n\n    const [handleState, setHandleState] = useState(false)\n\n    const state = () => {\n        if (handleState === false) {\n            setHandleState(true)\n        } else if (handleState === true) {\n            setHandleState(false)\n        }\n    }\n\n    const [sInput, setsInput] = useState()\n\n\n    const [handleAddress, setHandleAddress] = useState(false)\n\n    const address = () => {\n        if (handleAddress === false) {\n            setHandleAddress(true)\n        } else if (handleAddress === true) {\n            setHandleAddress(false)\n        }\n    }\n\n    const [aInput, setaInput] = useState()\n\n\n    const [handleZipCode, setHandleZipCode] = useState(false)\n\n    const zipCode = () => {\n        if (handleZipCode === false) {\n            setHandleZipCode(true)\n        } else if (handleZipCode === true) {\n            setHandleZipCode(false)\n        }\n    }\n\n    const [zcInput, setzcInput] = useState()\n\n\n    const [handleDob, setHandleDob] = useState(false)\n\n    const dob = () => {\n        if (handleDob === false) {\n            setHandleDob(true)\n        } else if (handleDob === true) {\n            setHandleDob(false)\n        }\n    }\n\n    const [dobInput, setdobInput] = useState(false)\n\n    const dobInputHandler = () => {\n        if (dobInput === false) {\n            setdobInput(true)\n        } else if (dobInput === true) {\n            setdobInput(false)\n        }\n    }\n\n    const [handlePhoneNumber, setHandlePhoneNumber] = useState(false)\n\n    const phoneNumber = () => {\n        if (handlePhoneNumber === false) {\n            setHandlePhoneNumber(true)\n        } else if (handlePhoneNumber === true) {\n            setHandlePhoneNumber(false)\n        }\n    }\n\n    const [pnInput, setpnInput] = useState(false)\n\n    const pnInputHandler = () => {\n        if (pnInput === false) {\n            setpnInput(true)\n        } else if (pnInput === true) {\n            setpnInput(false)\n        }\n    }\n\n\n    const [handleSsn, setHandleSsn] = useState(false)\n\n    const ssn = () => {\n        if (handleSsn === false) {\n            setHandleSsn(true)\n        } else if (handleSsn === true) {\n            setHandleSsn(false)\n        }\n    }\n\n    const [ssnInput, setsnsInput] = useState(false)\n\n    const ssnInputHandler = () => {\n        if (ssnInput === false) {\n            setsnsInput(true)\n        } else if (ssnInput === true) {\n            setsnsInput(false)\n        }\n    }\n\n    const [updateCard, setUpdateCard] = useState(false)\n\n    const updateCardInputHandler = () => {\n        if (updateCard === false) {\n            setUpdateCard(true)\n        } else if (updateCard === true) {\n            setUpdateCard(false)\n        }\n    }\n\n    const [firstNameInput, setFirstNameInput] = useState(false)\n\n    const toggleFirstName = () => {\n\n  \n            if (firstNameInput === false) {\n                setFirstNameInput(true)\n            } else if (firstNameInput === true) {\n                setFirstNameInput(false)\n            }\n        \n\n    }\n\n    const [businessUrlInput, setBusinessUrlInput] = useState(false)\n\n    const toggleBusinessUrlInput = () => {\n\n        if (businessUrlInput === false) {\n            setBusinessUrlInput(true)\n        } else if (businessUrlInput === true) {\n            setBusinessUrlInput(false)\n        }\n\n\n    }\n\n    const [emailInput, setEmailInput] = useState(false)\n\n\n    const toggleEmailInput = () => {\n\n        if (emailInput === false) {\n            setEmailInput(true)\n        } else if (emailInput === true) {\n            setEmailInput(false)\n        }\n\n    }\n\n\n\n\n\n\n\n\n    return (\n        <div className=\"stripe-setup\">\n            <ErrorModal error={error} onClear={clearError} />\n\n            {isLoading && <LoadingSpinner asOverlay />}\n\n            { stripeAccount &&\n                <form>\n                    <button className=\"bttn-update\" onClick={handleSubmit(onSubmit)}> save changes</button>\n                    <br />\n\n                    <br />\n                    <span>✅</span>\n                    <label>email:</label>\n                    {stripeAccount.email}\n\n                    <br />\n              \n                    {\n                        !emailInput &&\n                        <div>\n                                  \n                                  <div className=\"bttn-update\" onClick={toggleEmailInput}>edit</div>\n                        </div>\n                    }\n                    {\n                        emailInput &&\n                        <div>\n                            <input {...register(\"email\")} defaultValue={stripeAccount.email} />\n                            <div className=\"bttn-update\" onClick={toggleEmailInput}>nvm</div>\n                        </div>\n                    }\n\n                    <hr/>\n                    <br />\n                    <p>depending on what ur business is individual, company, non profit, or government entity, the qualifications to buy and deploy ad's will be different.</p>\n                    business:{stripeAccount.business_type}\n                    <br />\n                    \n\n\n                    {stripeAccount.business_type}\n                    {\n                        bizSelector &&\n\n                        <select  {...register(\"bizType\")}>\n                            <option value={stripeAccount.business_type}></option>\n                            <option value=\"individual\">individual</option>\n                            <option value=\"company\">company</option>\n                            <option value=\"non_profit\">non profit</option>\n                            <option value=\"government_entity\">government organization</option>\n                        </select>\n\n                    }\n\n\n                    {/* {\n                        !bizSelector &&\n                        <div onClick={selectorList}>change</div>\n                    } */}\n\n                    {bizSelector &&\n                        <div onClick={selectorList}>nvm</div>}\n                    <br />\n\n\n                    {(stripeAccount.requirements || stripeAccount) &&\n\n                        <div>\n                            {\n\n                                stripeAccount.requirements.currently_due.find(x => x === \"business_profile.url\") &&\n                                <div>\n                                    <hr />\n                                    <p> we're going to need a url for your business. click profile to make it ur homepage on the heavinlyhost</p>\n\n                                    <label>business url:</label>\n                                    <input {...register(\"bizUrl\")} />\n                                </div>\n\n                            }\n\n                            {\n                                stripeAccount.business_profile.url &&\n                                <div>\n                                    <hr />\n                                    <p> we're going to need a url for your business.</p>\n                                    <span>✅</span>\n\n                                    <label>business url:</label>\n                                    <span>{stripeAccount.business_profile.url}</span>\n                                    { !businessUrlInput &&\n\n                                    <div>\n                                       \n                                        <div className=\"bttn-update\" onClick={toggleBusinessUrlInput}>edit</div>\n                                    </div>\n\n                                    }\n                                    {\n                                        businessUrlInput &&\n                                        <div>\n                                        <input value={stripeAccount.business_profile.url}{...register(\"bizUrl\")} />\n                                        <div className=\"bttn-update\" onClick={toggleBusinessUrlInput}>nvm</div>\n                                        </div>\n                                    }\n\n                         \n                                </div>\n                            }\n\n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"individual.first_name\") &&\n\n                                <div>\n                                    <hr />\n                                    <label> first name:</label>\n                                    <input {...register(\"firstName\")} />\n\n                                </div>\n                            }\n\n\n                            {stripeAccount.individual &&\n                                stripeAccount.individual.first_name &&\n\n                                <div>\n                                    <hr />\n                                    <span>✅</span>\n                                    <label> first name:</label>\n                                    <span>{stripeAccount.individual.first_name}</span>\n                                    {!firstNameInput &&\n\n                                    <div> \n                                      \n                                        <div className=\"bttn-update\" onClick={toggleFirstName}>edit</div>\n                                        </div>\n                                        }\n                                    {firstNameInput &&\n                                        <div>\n                                        <input value={stripeAccount.individual.first_name} {...register(\"firstName\")} />\n                                        <div className=\"bttn-update\" onClick={toggleFirstName}>nvm</div>\n                                        </div>\n                                    }\n                                    \n\n                                </div>\n                            }\n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"individual.last_name\") &&\n\n                                <div>\n                                    <hr />\n                                    <label> last name:</label>\n                                    <input {...register(\"lastName\")} />\n\n                                </div>\n                            }\n\n                            {stripeAccount.individual &&\n                                stripeAccount.individual.last_name &&\n\n                                <div>\n                                    <hr />\n                                    <span>✅</span>\n                                    <label> last name:</label>\n                                    <span>{stripeAccount.individual.last_name}</span>\n\n\n\n                                    {\n                                        handleLastName &&\n                                        <div>\n                                            <input defaultValue={stripeAccount.individual.last_name} {...register(\"lastName\")} />\n                                            <div className=\"bttn-update\" onClick={lastName}>nvm</div>\n                                        </div>\n                                    }\n\n                                    {!handleLastName &&\n                                        <div className=\"bttn-update\" onClick={lastName}>edit</div>}\n                                </div>\n                            }\n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"individual.address.city\") &&\n\n                                <div>\n                                    <hr />\n                                    <label> city:</label>\n                                    <input {...register(\"city\")} />\n\n                                </div>\n                            }\n\n                            {stripeAccount.individual &&\n                                stripeAccount.individual.address.city &&\n\n\n                                <div>\n                                    <hr />\n                                    <span>✅</span>\n                                    <label> city:</label>\n                                    <span>{stripeAccount.individual.address.city}</span>\n\n                                    {\n                                        handleCity &&\n                                        <div><input defaultValue={stripeAccount.individual.address.city} {...register(\"city\")} />\n                                            <div className=\"bttn-update\" onClick={city}>nvm</div>\n                                        </div>\n                                    }\n\n                                    {\n                                        !handleCity &&\n\n                                        <div className=\"bttn-update\" onClick={city}>edit</div>\n                                    }\n\n                                </div>\n                            }\n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"individual.address.state\") &&\n\n                                <div>\n                                    <hr />\n                                    <label> state:</label>\n                                    <input {...register(\"state\")} />\n\n                                </div>\n                            }\n\n                            {stripeAccount.individual &&\n                                stripeAccount.individual.address.state &&\n\n\n                                <div>\n                                    <hr />\n                                    <span>✅</span>\n                                    <label> state:</label>\n                                    <span>{stripeAccount.individual.address.state}</span>\n\n                                    {\n                                        handleState &&\n                                        <div><input defaultValue={stripeAccount.individual.address.state} {...register(\"state\")} />\n                                            <div className=\"bttn-update\" onClick={state}>nvm</div>\n                                        </div>\n                                    }\n\n                                    {\n                                        !handleState &&\n\n                                        <div className=\"bttn-update\" onClick={state}>edit</div>\n                                    }\n\n                                </div>\n                            }\n\n\n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"individual.address.line1\") &&\n\n                                <div>\n                                    <hr />\n                                    <label> address:</label>\n                                    <input {...register(\"address\")} />\n\n                                </div>\n                            }\n\n                            {stripeAccount.individual &&\n                                stripeAccount.individual.address.line1 &&\n\n\n                                <div>\n                                    <hr />\n                                    <span>✅</span>\n                                    <label> address:</label>\n                                    <span>{stripeAccount.individual.address.line1}</span>\n\n                                    {\n                                        handleAddress &&\n                                        <div><input defaultValue={stripeAccount.individual.address.line1} {...register(\"address\")} />\n                                            <div className=\"bttn-update\" onClick={address}>nvm</div>\n                                        </div>\n                                    }\n\n                                    {\n                                        !handleAddress &&\n\n                                        <div className=\"bttn-update\" onClick={address}>edit</div>\n                                    }\n\n                                </div>\n                            }\n\n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"individual.address.postal_code\") &&\n\n                                <div>\n                                    <hr />\n                                    <label> zip code:</label>\n                                    <input {...register(\"zipCode\")} />\n\n                                </div>\n                            }\n\n                            {stripeAccount.individual &&\n                                stripeAccount.individual.address.postal_code &&\n\n\n                                <div>\n                                    <hr />\n                                    <span>✅</span>\n                                    <label> zip code:</label>\n                                    <span>{stripeAccount.individual.address.postal_code}</span>\n\n                                    {\n                                        handleZipCode &&\n                                        <div><input defaultValue={stripeAccount.individual.address.postal_code} {...register(\"zipCode\")} />\n                                            <div className=\"bttn-update\" onClick={zipCode}>nvm</div>\n                                        </div>\n                                    }\n\n                                    {\n                                        !handleZipCode &&\n\n                                        <div className=\"bttn-update\" onClick={zipCode}>edit</div>\n                                    }\n\n                                </div>\n                            }\n\n\n                            {\n                                (stripeAccount.requirements.currently_due.find(x => x === \"individual.dob.day\") || stripeAccount.requirements.currently_due.find(x => x === \"individual.dob.month\") || stripeAccount.requirements.currently_due.find(x => x === \"individual.dob.year\")) &&\n\n                                <div>\n                                    <hr />\n                                    <label> dob </label>\n                                    <input {...register(\"month\")} />\n                                    <input {...register(\"day\")} />\n                                    <input {...register(\"year\")} />\n\n                                </div>\n                            }\n\n\n\n                            {stripeAccount.individual &&\n                                stripeAccount.individual.dob.day && stripeAccount.individual.dob.month && stripeAccount.individual.dob.year &&\n\n\n                                <div>\n                                    <hr />\n                                    <span>✅</span>\n                                    <label> dob:</label>\n                                    <span>{stripeAccount.individual.dob.month}</span>/<span>{stripeAccount.individual.dob.day}</span>/<span>{stripeAccount.individual.dob.year}</span>\n\n                                    {\n                                        handleDob &&\n                                        <div><input defaultValue={stripeAccount.individual.dob.month} {...register(\"month\")} />\n                                            <input defaultValue={stripeAccount.individual.dob.day} {...register(\"day\")} />\n                                            <input defaultValue={stripeAccount.individual.dob.year} {...register(\"year\")} />\n                                            <div className=\"bttn-update\" onClick={dob}>nvm</div>\n                                        </div>\n                                    }\n\n                                    {\n                                        !handleDob &&\n\n                                        <div className=\"bttn-update\" onClick={dob}>edit</div>\n                                    }\n\n                                </div>\n                            }\n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"individual.phone\") &&\n\n                                <div>\n                                    <hr />\n                                    <label> phone:</label>\n                                    {\n                                        !pnInput &&\n                                        <div>\n                                            <span className=\"needed\">needed</span>\n                                            <br/>\n                                            <span onClick={pnInputHandler}>edit</span>\n                                        </div>\n                                    }\n\n                                    {pnInput && <div>                   \n                                        <input {...register(\"phoneNumber\")} />\n                                        <br/>\n                                        <span onClick={pnInputHandler}>nvm</span>\n                                    </div>\n                                    }\n                                </div>\n                            }\n\n                            {stripeAccount.individual &&\n                                stripeAccount.individual.phone &&\n\n\n                                <div>\n                                    <hr />\n                                    <span>✅</span>\n                                    <label> phone:</label>\n                                    <span>{stripeAccount.individual.phone}</span>\n\n                                    {\n                                        handlePhoneNumber &&\n                                        <div><input defaultValue={stripeAccount.individual.phone} {...register(\"zipCode\")} />\n                                            <div className=\"bttn-update\" onClick={phoneNumber}>nvm</div>\n                                        </div>\n                                    }\n\n                                    {\n                                        !handlePhoneNumber &&\n\n                                        <div className=\"bttn-update\" onClick={phoneNumber}>edit</div>\n                                    }\n\n                                </div>\n                            }\n\n\n\n\n\n                            \n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"individual.id_number\") &&\n\n                                <div>\n                                    <hr />\n                                    <p>\n                                        as a <span>third party payment network </span> at the end of the year we send each of our pro users a 1099-k tax form. In order to do this we need to confirm your identity with your social security number. If your ssn is entered wrong you will have to go through more steps with a photo id to prove your\n                                    </p>\n\n                                    <label> ssn: </label>\n                                    {!ssnInput &&\n                                        <div>\n                                            <span className=\"needed\">needed</span>\n                                            <br />\n                                            <span className=\"bttn-update\" onClick={ssnInputHandler}>edit</span>\n                                        </div>\n                                    }\n\n                                    {ssnInput &&\n                                        <div>\n                                            <input {...register(\"ssn\")} />\n                                            <br />\n                                            <label className=\"bttn-update\" onClick={ssnInputHandler}>nvm</label>\n                                        </div>\n                                    }\n\n                                </div>\n                            }\n\n                            {stripeAccount.individual &&\n                                stripeAccount &&\n\n\n                                <div>\n                                    <hr />\n                                    <label> ssn:</label>\n\n                                    {stripeAccount.individual.id_number_provided &&\n                                        <span>✅</span>}\n\n\n\n                                </div>\n                            }\n\n                            {\n                                stripeAccount.requirements.currently_due.find(x => x === \"external_account\")\n                                &&\n                                <div>\n                                    <hr />\n                                    <div>\n                                        <div> <span onClick={togglePaymentType}>card</span> <span onClick={togglePaymentType}>bank account</span> </div>\n\n\n                                        {accountToggle &&\n\n                                            <div>\n                                                <br />\n                                                <form>\n                                                    <label>card number:</label>\n                                                    <input {...register(\"cardNumber\")} />\n                                                    <br />\n                                                    <label>exp month:</label>\n                                                    <input {...register(\"expMonth\")} />\n                                                    <br />\n                                                    <label>exp year:</label>\n                                                    <input {...register(\"expYear\")} />\n                                                    <br />\n                                                    <label>CVC:</label>\n                                                    <input {...register(\"cvc\")} />\n                                                    \n                                                </form>\n\n                                            </div>\n\n                                        }\n                                        {\n                                            !accountToggle &&\n                                            <div>\n                                                <form>\n                                                    <br />\n                                                    <label>routing number:</label>\n                                                    <br />\n                                                    <input />\n                                                    <br />\n                                                    <label>account number:</label>\n                                                    <br />\n                                                    <input />\n                                                    <div>submit </div>\n                                                </form>\n                                            </div>\n                                        }\n                                    </div>\n\n                                </div>\n                            }\n\n\n                            {stripeAccount.individual &&\n                                stripeAccount &&\n\n\n                                <div>\n                                  <hr/>\n                                    <div>✅</div> how we pay you\n                                    { !updateCard &&\n                                    <div className=\"bttn-update\" onClick={updateCardInputHandler}>update</div>\n                                    }\n                                    { updateCard &&\n                                    <div className=\"bttn-update\" onClick={updateCardInputHandler}>nvm</div>\n                                    }\n                                    {updateCard && <div>\n\n                                    {accountToggle &&\n\n                                        \n                                        <div>\n                                              <div> <span className=\"bttn-update\" onClick={togglePaymentType}>bank account</span> </div>\n                                         <div>\n                                            <br />\n                                            <form>\n                                                <label>card number:</label>\n                                                <input {...register(\"cardNumber\")}/>\n                                                <br />\n                                                <label>exp month:</label>\n                                                <input  {...register(\"expMonth\")}/>\n                                                <br />\n                                                <label>exp year:</label>\n                                                <input {...register(\"expYear\")}/>\n                                                <br />\n                                                <label>CVC:</label>\n                                                <input {...register(\"cvc\")}/>\n                                                \n                                            </form>\n\n                                        </div>\n\n                                        </div>\n\n                                    }\n\n\n                                    {\n                                        !accountToggle &&\n                                        <div>\n                                              <div> <span className=\"bttn-update\" onClick={togglePaymentType}>card</span> </div>\n                                            <form>\n                                                <br />\n                                                <label>routing number:</label>\n                                                <br />\n                                                <input />\n                                                <br />\n                                                <label>account number:</label>\n                                                <br />\n                                                <input />\n                                               \n                                            </form>\n                                        </div>\n                                    }\n                                    </div>}\n                                </div>\n\n                            }\n\n\n\n\n                            {stripeAccount.requirements.currently_due.map(x =>\n                                <div>\n                                    <hr />\n                                    {x}\n                                </div>\n                            )}\n\n\n                        </div>\n\n                    }\n\n\n\n\n\n\n\n                </form>\n            }\n            <div className=\"update-padding\"></div>\n\n        </div>\n    )\n}\n\n\n\nexport default UpdateContainer\n","import React from 'react'\nimport UpdateContainer from './UpdateContainer'\nimport UpgradeContainer from './UpgradeContainer'\n\nconst StripeContainer = (props) => {\n\n\n\n\n\n    return (\n\n\n\n        <div>\n\n            {\n                !props.isAccount &&\n                <div>\n                    <UpgradeContainer accEmail={props.accEmail} isAcct={props.update} />\n                    isnt account\n                </div>\n\n            }\n\n            {\n                props.isAccount &&\n\n                <div>\n\n                    <UpdateContainer />\n\n                </div>\n\n            }\n        </div>\n    )\n}\n\nexport default StripeContainer\n","import React, { useContext } from 'react'\n\nimport io from \"socket.io-client\"\n\n\nimport { useForm } from \"react-hook-form\"\n\n\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\n\nimport { AuthContext } from \"../../../shared/context/auth-context\"\n\nimport \"../../../css/style.css\"\n\nconst SponsorAPost = () => {\n\n\n    const auth = useContext(AuthContext)\n\n    const { register, handleSubmit } = useForm()\n\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n\n\n    const onSubmit = async (data) => {\n\n        const socket = io(\"http://10.0.0.16:5001\")\n\n        try {\n            const gav = await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/sendAPostSponsorship`,\n                \"POST\",\n                JSON.stringify({\n                    price: data.price,\n                    sUser: data.sponsoree.split(\" \"),\n                    post: data.post\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n\n            socket.emit(\"update\", gav.sponsorshipPost)\n\n        } catch (err) {\n\n        }\n\n\n\n    }\n\n\n    return (\n        <div className=\"ss-sap\">\n\n            <div>\n                <form onSubmit={handleSubmit(onSubmit)}>\n                    <label>post</label>\n                    <br/>\n                    <textarea {...register(\"post\")}/>\n                    <br/>\n                    <label>price</label>\n                    <br />\n                    <input {...register(\"price\")} />\n                    <br />\n                    <label>star</label>\n                    <br />\n                    <input {...register(\"sponsoree\")} />\n\n                    <br/>\n                   \n\n                    <button>sponsor</button>\n\n                </form>\n            </div>\n\n        </div>\n    )\n}\n\nexport default SponsorAPost\n","import React, {useContext, useEffect, useState} from 'react'\n\nimport {useHttpClient} from \"../../../../shared/hooks/http-hook\"\n\nimport {AuthContext} from \"../../../../shared/context/auth-context\"\n\nconst OGContractsList = (props) => {\n\n\nconst auth = useContext(AuthContext)\n\nconst { isLoading, error, sendRequest, clearError } = useHttpClient()\n\nconst [ssPosts, setssPosts] = useState()\n\nuseEffect(()=> {\n\n    const fetchPostSponsorShips = async () => {\n\n        try {\n            const responseData = await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/getPostsYouSponsor`,\n                \"GET\",\n                null,\n                {\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n            \n            setssPosts(responseData.findBusPosts)\n            \n            \n\n            \n        } catch (err) {\n\n        }\n\n\n    }\n\n    fetchPostSponsorShips()\n\n\n}, [sendRequest, auth.token])\n\n\n\n    return (\n        <div>\n\n            {ssPosts &&\n            ssPosts.map(x => \n                <div className=\"ssBorder\">\n                    <div>\n                        {x.price}\n                    </div>\n                    <div>\n                        {x.receiver.map(x =>\n                        <div>\n                        { x.tookContract &&\n                            <div>\n                                <div>\n                                    {x.contractedPost}\n                                </div>\n                                <div>{x.date}</div>\n                                \n                            </div>}\n                            {\n                                !x.tookContract &&\n                                <div>\n                                    pending...\n                                </div>\n                            }\n\n                            </div>\n                            )}\n                        \n                    </div>\n\n                </div>\n                ).reverse()}\n        </div>\n    )\n}\n\nexport default OGContractsList\n","import React from 'react'\n\n\n\n\n\nimport \"../../../css/style.css\"\nimport OGContractsList from './outgoingContracts/OGContractsList'\n\nconst PostsUSponsor = (props) => {\n    return (\n        <div>\n            <div className=\"ss-SSFeed\">\n            <OGContractsList postsList={props.userProfile} />\n\n        </div>\n        </div>\n    )\n}\n\nexport default PostsUSponsor\n","import React, { useState, useContext, useEffect } from 'react'\n\nimport { useForm } from \"react-hook-form\"\n\n\nimport { useHttpClient } from \"../../../../shared/hooks/http-hook\"\n\nimport { AuthContext } from \"../../../../shared/context/auth-context\"\nimport Modal from '../../../../shared/components/UIElements/Modal'\nimport LoadingSpinner from '../../../../shared/components/UIElements/LoadingSpinner'\n\nconst IncContractsitem = (props) => {\n\n\n    const auth = useContext(AuthContext)\n\n    const { register, handleSubmit } = useForm()\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    const [company, setCompany] = useState()\n\n    const [aSponsor, setASponsor] = useState()\n\n\n    useEffect(() => {\n\n        const getCompany = async () => {\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/getAUser/${props.sponsor}`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n                setASponsor(responseData.company.username)\n                if (props.tookContract === true) {\n                    setCheck(\"✅\")\n                } else {\n                    setCheck(\"☑️\")\n                }\n            } catch (err) {\n\n            }\n\n        }\n        getCompany()\n\n\n\n    }, [props.sponsor, auth.token, sendRequest, props.tookContract])\n\n\n   \n    const [check, setCheck] = useState()\n\n    // if (props.tookContract === true) {\n    //     setCheck(\"✅\")\n    // } else {\n    //     setCheck(\"☑️\")\n    // }\n\n    const toString = props.price.toString()\n\n\n    const fullLength = toString.length\n\n    const priceStringLength = toString.length - 2\n\n    const dectatePrice = toString.slice(0, priceStringLength) + \".\" + toString.slice(priceStringLength)\n\n    const [isPosted, setIsPosted] = useState()\n\n\n    const acceptSS = async (data) => {\n\n        try {\n\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/contractAPost`,\n                \"POST\",\n                JSON.stringify({\n                    post: data.post,\n                    contractId: props.contractId\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n\n        } catch (err) {\n\n        }\n\n\n\n        props.sponsorship(\"2\")\n\n\n\n\n\n    }\n\n    const [ssInput, setssInput] = useState(false)\n\n    const toggleAcceptButton = () => {\n        if (ssInput === false) {\n            setssInput(true)\n        } else if (ssInput === true) {\n            setssInput(false)\n        }\n    }\n\n\n    const posted = () => {\n\n        setIsPosted(true)\n\n    }\n\n\n    return (\n        <div>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <div >\n\n            \n            <div>{aSponsor}</div>\n            <div>{dectatePrice}</div>\n            {props.post &&\n            <div>\n                <div>{props.post}</div>\n            </div>\n            }\n\n            {props.contractedPost &&\n                <div>{props.contractedPost}</div>\n            }\n            { props.date &&\n                <div>\n\n                    <div>{props.date}</div>\n                    <div>{check}</div>\n                </div>\n            }\n            \n\n            {/* {\n                isPosted &&\n                <div>\n                    posted.\n                     </div>\n            } */}\n\n\n            { !isPosted && !props.contractedPost &&\n                <div>\n\n                    {check &&\n                        !ssInput &&\n\n                        <div>\n\n                            <div onClick={toggleAcceptButton}>{check}accept</div>\n\n                        </div>\n                    }\n                    {check && ssInput &&\n                        <div>\n                            <div>\n                                <form>\n                                    <textarea\n                                        {...register(\"post\")}\n                                    />\n                                    <div onClick={handleSubmit(acceptSS)}> $ post $ </div>\n                                </form>\n                            </div>\n                            <div onClick={toggleAcceptButton}>{check}nvm</div>\n                        </div>\n                    }\n                </div>\n            }\n\n        </div>\n        </div>\n    )\n}\n\nexport default IncContractsitem\n","import React, { useContext, useEffect, useState } from 'react'\nimport IncContractsitem from './IncContractsitem'\nimport { AuthContext } from \"../../../../shared/context/auth-context\"\n\nimport { useHttpClient } from \"../../../../shared/hooks/http-hook\"\n\nconst IncConctractsList = (props) => {\n\n\n    const auth = useContext(AuthContext)\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    \n\n    // const urContract = props.contracts.receiver.find(x => `${x.contracted}` === `${auth.userId}`)\n\n    // const [aSponsor, setASponsor] = useState()\n\n    // useEffect(() => {\n    //     const getCompany = async () => {\n\n    //         try {\n    //             const responseData = await sendRequest(\n    //                 `${process.env.REACT_APP_BACKEND_URL}/user/getAUser/${props.contracts.creator}`,\n    //                 \"GET\",\n    //                 null,\n    //                 {\n    //                     Authorization: 'Bearer ' + auth.token\n    //                 }\n    //             )\n    //             setASponsor(responseData.company.username)\n    //         } catch (err) {\n\n    //         }\n\n    //     }\n    //     getCompany()\n\n\n    // }, [sendRequest, auth.token, props.contracts.creator])\n\n\n\n    return (\n        <div className=\"\">\n\n\n            {props.contracts.map((x) =>\n\n\n\n\n                <IncContractsitem\n                    key={x._id}\n                    sponsor={x.creator}\n                    price={x.price}\n                    contractId={x._id}\n                    sponsorship={props.sponsorship}\n                    post={x.post}\n\n                    date={x.receiver.find(x => `${x.contracted}` === `${auth.userId}`).date}\n                    tookContract={x.receiver.find(x => `${x.contracted}` === `${auth.userId}`).tookContract}\n                    contractedPost={x.receiver.find(x => `${x.contracted}` === `${auth.userId}`).contractedPost}\n                />\n            ).reverse()}\n\n        </div>\n    )\n}\n\nexport default IncConctractsList\n","import React, { useContext, useEffect, useRef, useState } from 'react'\n\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\n\nimport { AuthContext } from \"../../../shared/context/auth-context\"\n\nimport io from \"socket.io-client\"\n\nimport IncContractsList from './incContracts/IncContractsList'\n\nconst SponsoredPosts = (props) => {\n\n    // const socket = useRef(null)\n\n    const auth = useContext(AuthContext)\n\n    const [contracts, setContracts] = useState()\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    const [ssUpdate, setssUpdate] = useState([])\n\n\n    useEffect(() => {\n\n        const getContracts = async () => {\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/findSSPosts`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                console.log(responseData)\n\n                setContracts(responseData.findPSS)\n\n\n\n                // socket.on(\"update\", setContracts(responseData.findPSS)\n\n                // )\n\n            } catch (err) {\n\n            }\n\n\n        }\n\n        getContracts()\n\n\n\n    }, [auth.token, sendRequest])\n\n\n\n    const getUpdate = async () => {\n        // socket.current.on(\"update\", update => {\n        //     setContracts(prevState => [...prevState, update])\n        // }\n\n        // )\n\n        // try {\n        //     const responseData = await sendRequest(\n        //         `${process.env.REACT_APP_BACKEND_URL}/user/findSSPosts`,\n        //         \"GET\",\n        //         null,\n        //         {\n        //             Authorization: 'Bearer ' + auth.token\n        //         }\n        //     )\n\n        //     console.log(responseData)\n\n        //     // setContracts(responseData.findPSS)\n\n        //     // socket.current.on(\"update\", update => {\n        //     //     setContracts(prevState => [...prevState, update])\n        //     // }\n\n        //     // )\n\n        //     socket.current.emit(\"update\", responseData.findPSS)\n\n        //     // socket.on(\"update\", setContracts(responseData.findPSS)\n\n        //     // )\n\n        // } catch (err) {\n\n        // }\n\n\n    }\n\n\n    useEffect(() => {\n        const socket = io(\"http://10.0.0.16:5001\")\n\n        socket.on(\"update\", update => {\n            setContracts(prevState => [...prevState, update])\n        }\n\n        )\n    }, [])\n\n\n\n    const [acceptSS, setAcceptSS] = useState(1)\n\n\n    useEffect(() => {\n\n        const getContracts = async () => {\n\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/findSSPosts`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                console.log(responseData)\n\n\n                setContracts(responseData.findPSS)\n\n\n            } catch (err) {\n\n            }\n\n\n        }\n\n        getContracts()\n\n\n\n    }, [sendRequest, auth.token, acceptSS])\n\n\n\n    return (\n        <div className=\"ss-SSFeed\">\n\n           \n            { contracts &&\n                <IncContractsList sponsorship={setAcceptSS} contracts={contracts} />}\n\n\n        </div>\n    )\n}\n\nexport default SponsoredPosts\n","import React, { useState, useContext } from 'react'\n\n\nimport { useHttpClient } from \"../../../shared/hooks/http-hook\"\nimport { AuthContext } from \"../../../shared/context/auth-context\"\n\nimport \"../../../css/style.css\"\nimport SponsorAPost from './SponsorAPost'\nimport PostsUSponsor from './PostsUSponsor'\nimport SponsoredPosts from './SponsoredPosts'\n\n\n\nconst SScontainer = (props) => {\n\n    const auth = useContext(AuthContext)\n\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n\n    const [togglePostSS, setPostSS] = useState()\n\n    const [SP, setSP] = useState(true)\n\n    const [PUS, setPUS] = useState()\n\n    const [SAP, setSAP] = useState()\n\n    const toggleSponsorAPost = () => {\n\n\n        setPUS(false)\n        setSP(false)\n        setSAP(true)\n\n    }\n\n    const togglePostsUSponsor = () => {\n        setSP(false)\n        setSAP(false)\n        setPUS(true)\n    }\n\n    const toggleSponsoredPosts = () => {\n        setSAP(false)\n        setPUS(false)\n        setSP(true)\n    }\n\n\n\n\n\n    return (\n        <div className=\"ss-container\">\n\n            \n            <div className=\"ss-container-SP\" onClick={toggleSponsoredPosts}>sponsorships </div>\n            { SP &&\n                <SponsoredPosts />}\n            <div className=\"ss-container-SAP\" onClick={toggleSponsorAPost}>sponsor a post</div>\n            { SAP &&\n                <SponsorAPost />\n            }\n            <div className=\"ss-container-PUS\" onClick={togglePostsUSponsor}>posts you sponsor</div>\n            {   PUS &&\n                <PostsUSponsor userProfile={props.userProfile} />}\n\n\n\n\n\n\n        </div>\n    )\n}\n\nexport default SScontainer\n","import React from 'react'\n\nconst ProfilePostList = (props) => {\n    console.log(props)\n    return (\n        <div>\n            <div>\n                {props.findUserPosts.map(x => \n                    \n                    <div>\n                    <div>\n                        {x.post}\n                    </div>\n                    <div>\n                        {x.date}\n                    </div>\n                    </div>\n\n                    )}\n            </div>\n            \n        </div>\n    )\n}\n\nexport default ProfilePostList\n","import React from 'react'\nimport ProfilePostList from './ProfilePostList'\n\nconst ProfileContainer = (props) => {\n\n\n\n\n\n    return (\n        <div className=\"star--list\">\n            <h3>\n                {props.userProfile.username}\n            </h3>\n            \n\n            <ProfilePostList\n            findUserPosts={props.findUserPosts}\n            />\n\n        </div>\n    )\n}\n\nexport default ProfileContainer\n","import React, { useContext, useEffect, useRef, useState, useCallback } from 'react'\n\nimport \"../../css/style.css\"\n\nimport { useHttpClient } from \"../../shared/hooks/http-hook\"\nimport { AuthContext } from \"../../shared/context/auth-context\"\nimport { useForm } from \"react-hook-form\"\n\n\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\nimport LeftAside from '../aside/LeftAside'\nimport RightAside from '../aside/RightAside'\nimport SplashFeedList from '../hs/splashFeed/SplashFeedList'\n\n\nimport DStarList from '../hs/searchStuff/dictionary/DStarList'\nimport StarsList from '../hs/searchStuff/stars/StarsList'\nimport SplashList from '../hs/searchStuff/splash/SplashList'\nimport DictionaryList from '../hs/searchStuff/dictionary/DictionaryList'\nimport WordList from '../hs/searchStuff/word/WordList'\nimport DefinitionList from '../hs/searchStuff/definition/DefinitionList'\nimport SecretWordList from '../hs/searchStuff/secretWord/SecretWordList'\nimport SecretWordDefinitionList from '../hs/searchStuff/secretWordDefintion/SecretWordDefinitionList'\n\nimport DictionaryFeedList from '../hs/dictionaryFeed/DictionaryFeedList'\nimport SecretWordFeedList from '../hs/dictionaryFeed/SecretWordFeedList'\nimport DictionaryFeedItem from '../hs/dictionaryFeed/DictionaryFeedItem'\nimport UpgradeContainer from '../hs/stripeSetup/UpgradeContainer'\nimport StripeContainer from '../hs/stripeSetup/StripeContainer'\nimport SScontainer from '../hs/sponsorships/SScontainer'\nimport ProfileContainer from '../hs/profile/ProfileContainer'\n\n\nconst HomeScreen = () => {\n\n    const { register, handleSubmit, reset, formState: { isSubmitSuccessful } } = useForm({ defaultValues: {post: \"\"}})\n\n    const auth = useContext(AuthContext)\n\n    useEffect(() => {\n        if (isSubmitSuccessful) {\n            reset({ post: '' });\n          }\n    },\n    [reset, isSubmitSuccessful])\n\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient()\n\n    const [loadedSplashFeed, setLoadedSplashFeed] = useState()\n\n    const [homeMode, setHomeMode] = useState(true)\n\n    const [changeAValue, setChangeAValue] = useState()\n\n\n    const homeHandler = async () => {\n        const fetchSplashFeed = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/splashFeed`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n                //shouldntRender.current = io(\"http://10.0.0.16:8080\")\n                //shouldntRender.current.on(\"shimmer\", shimmer => {\n\n\n\n                setLoadedSplashFeed(responseData.byDate)\n\n            } catch (err) {\n\n            }\n\n\n        }\n        \n\n        fetchSplashFeed()\n        setUrDictionaryMode(false)\n        setSearchMode(false)\n        setDictionaryFeedMode(false)\n        setStripeSignup(false)\n        setSponsorShips(false)\n        setProfile(false)\n        setHomeMode(true)\n\n        \n    }\n\n    const [searchMode, setSearchMode] = useState(false)\n\n\n\n    const [starSearch, setStarSearch] = useState(false)\n\n    const starSearchHandler = () => {\n        setSplashHand1(false)\n        setWordHand1(false)\n        setSecretWordHand1(false)\n        setDictionaryHand1(false)\n        setSearchMode(true)\n        setStarSearch(true);\n\n    }\n\n    const [starData, setStarData] = useState()\n\n    \n\n    \n\n    const [splashHand, setSplashHand] = useState()\n\n    const [splashHand1, setSplashHand1] = useState(false)\n\n    const splashSearchHandler = () => {\n        setStarSearch(false)\n        setDefinitionHand1(false)\n        setWordHand1(false)\n        setSplashHand1(true)\n    }\n\n    const [dictionaryHand, setDictionaryHand] = useState()\n\n    const [dictionaryHand1, setDictionaryHand1] = useState(false)\n\n    const dictionarySearchHandler = () => {\n        setStarSearch(false)\n        setSplashHand1(false)\n        setWordHand1(false)\n        setSecretWordHand1(false)\n        setDictionaryHand1(true)\n    }\n\n    const [wordHand, setWordHand] = useState()\n\n    const [wordHand1, setWordHand1] = useState(false)\n\n    const wordSearchHandler = () => {\n        setStarSearch(false)\n        setSplashHand1(false)\n        setDictionaryHand1(false)\n        setSecretWordHand1(false)\n        setWordHand1(true)\n    }\n\n    const [definitionHand, setDefinitionHand] = useState()\n\n    const [definitionHand1, setDefinitionHand1] = useState(false)\n\n    const definitionSearchHandler = () => {\n\n        setStarSearch(false)\n        setSplashHand1(false)\n        setDictionaryHand1(false)\n        setWordHand1(false)\n        setSecretWordHand1(false)\n        setDefinitionHand1(true)\n\n    }\n\n    const [secretWordHand, setSecretWordHand] = useState()\n\n    const [secretWordHand1, setSecretWordHand1] = useState(false)\n\n    const secretWordSearchHandler = () => {\n\n        setStarSearch(false)\n        setSplashHand1(false)\n        setDictionaryHand1(false)\n        setWordHand1(false)\n        setDefinitionHand1(false)\n\n        setSecretWordHand1(true)\n\n    }\n\n    /* handlers\n\n        setHomeMode(false)\n        setSearchMode(false)\n        setDictionaryFeedMode(false)\n\n     \n    */\n\n    const [secretWordDefinitionHand, setSecretWordDefinitionHand] = useState()\n\n    const [secretWordDefinitionHand1, setSecretWordDefinitionHand1] = useState(false)\n\n\n    const [userProfile, setUserProfile] = useState()\n\n\n\n    \n    const [loadedValue, setLoadedValue] = useState()\n\n\n    const onSubmitSearch = async (data, e) => {\n        \n    \n        try {\n            const responseData = await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/aSearch`,\n                \"POST\",\n                JSON.stringify({\n                    search: data.searchBar \n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n\n                }\n            )\n            \n            setStarData(responseData.findUser)\n            setSplashHand(responseData.findSplash)\n            setDictionaryHand(responseData.findDictionary)\n            setWordHand(responseData.findWord)\n            setDefinitionHand(responseData.findDefinition)\n            setSecretWordHand(responseData.findSecretWord)\n            setSecretWordDefinitionHand(responseData.findSecretWordDefinition)\n            setHomeMode(false)\n\n            setSearchMode(true)\n            starSearchHandler()\n\n           \n            \n\n        } catch (err) {\n\n        }\n\n        e.target.reset()\n\n        setDictionaryFeedMode(false)\n        setStripeSignup(false)\n    }\n\n    \n    \n    const onSubmitSplash = async (data, e) => {\n\n        console.log(data)\n\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/makeAPost`,\n                \"POST\",\n                JSON.stringify({\n                    post: data.post\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n\n                }\n\n            )\n\n        } catch (err) {\n\n        }\n\n\n\n        const fetchSplashFeed = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/splashFeed`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                setLoadedSplashFeed(responseData.byDate)\n                \n               \n            } catch (err) {\n\n            }\n\n\n\n\n        }\n\n        \n\n        \n        \n\n        \n        \n\n        fetchSplashFeed()\n        homeHandler()\n\n    }\n\n\n\n\n    \n\n\n\n\n\n    useEffect(() => {\n        const fetchSplashFeed = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/splashFeed`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n                //shouldntRender.current = io(\"http://10.0.0.16:8080\")\n                //shouldntRender.current.on(\"shimmer\", shimmer => {\n\n\n\n                setLoadedSplashFeed(responseData.byDate)\n\n            } catch (err) {\n\n            }\n\n\n        }\n\n        fetchSplashFeed()\n\n        \n\n\n\n\n\n    }, [sendRequest, auth.token])\n\n\n    const [dictionaryFeedMode, setDictionaryFeedMode] = useState()\n\n    const [dictionaryFeed, setDictionaryFeed] = useState()\n\n    const dictionaryFeedHandler = () => {\n        setHomeMode(false)\n        setSearchMode(false)\n        setUrDictionaryMode(false)\n        setSecretDictionaryInputMode(false)\n        setStripeSignup(false)\n        setSponsorShips(false)\n        setProfile(false)\n\n        const fetchDictionaryFeed = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/dictionaryFeed`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                setDictionaryFeed(responseData.byDate)\n\n\n                // const dictionarysTho = dictionaryFeed.map(x => x.dictionary)\n                // const fetchUserAndDictionary = async () => {\n                //     try {\n                //         const stuff = await sendRequest(\n                //             `${process.env.REACT_APP_BACKEND_URL}ACKEND_URL}/user/getDictionaryAndUser/${dictionarysTho}`,\n                //             \"GET\",\n                //             null,\n                //             {\n                //                 Authorization: 'Bearer ' + auth.token\n                //             }\n                //         )\n\n\n                //         setUserAndDictionary(stuff)\n                //         //console.log(userAndDictionary)\n                //     } catch (err) {\n\n                //     }\n\n\n\n                // }\n\n\n                // fetchUserAndDictionary()\n            } catch (err) {\n\n            }\n        }\n\n        fetchDictionaryFeed()\n\n\n\n        setDictionaryFeedMode(true)\n        setDictionaryInputMode(true)\n\n\n\n\n    }\n\n    useEffect(() => {\n        const fetchDictionaryFeed = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/dictionaryFeed`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                setDictionaryFeed(responseData.byDate)\n\n\n                // const dictionarysTho = dictionaryFeed.map(x => x.dictionary)\n                // const fetchUserAndDictionary = async () => {\n                //     try {\n                //         const stuff = await sendRequest(\n                //             `${process.env.REACT_APP_BACKEND_URL}ACKEND_URL}/user/getDictionaryAndUser/${dictionarysTho}`,\n                //             \"GET\",\n                //             null,\n                //             {\n                //                 Authorization: 'Bearer ' + auth.token\n                //             }\n                //         )\n\n\n                //         setUserAndDictionary(stuff)\n                //         //console.log(userAndDictionary)\n                //     } catch (err) {\n\n                //     }\n\n\n\n                // }\n\n\n                // fetchUserAndDictionary()\n            } catch (err) {\n\n            }\n        }\n\n        fetchDictionaryFeed()\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }, [sendRequest, auth.token])\n\n\n\n    // useEffect(() => {\n    //     if(userProfile){\n    //         if(userProfile.following ){\n\n    //         }\n    //     }\n    // }, [])\n\n\n    const [secretDictionaryInputMode, setSecretDictionaryInputMode] = useState()\n\n    const [dictionaryInputMode, setDictionaryInputMode] = useState()\n\n    const [dictionaryInputValue, setDictionaryInputValue] = useState()\n\n    const [toUpdate, setToUpdate] = useState(1)\n\n    const onSubmitDictionaryWord = async (data, e) => {\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/createWord`,\n                \"POST\",\n                JSON.stringify({\n                    word: data.word,\n                    definition: data.definition,\n                    etymology: data.etymology,\n                    dictionary: userProfile.dictionarys[0]._id\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n\n\n\n\n\n        } catch (err) {\n            console.log(err)\n        }\n\n        const fetchDictionaryFeed = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/dictionaryFeed`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                setDictionaryFeed(responseData.byDate)\n\n            } catch (err) {\n\n            }\n        }\n\n        e.target.reset()\n\n        fetchDictionaryFeed()\n\n        dictionaryFeedHandler()\n\n       \n        \n\n\n\n    }\n\n\n\n    const onSubmitDictionarySecretWord = () => { }\n\n\n    const [createADictionaryCard, setCreateADictionaryCard] = useState()\n\n\n    const [findUserFollowing, setFindUserFollowing] = useState()\n\n    const [findUserFollowers, setFindUserFollowers] = useState()\n\n    const [findUserPosts, setFindUserPosts] = useState()\n\n\n    useEffect(() => {\n        const fetchUserProfile = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/userProfile`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                console.log(responseData)\n\n                setFindUserFollowing(responseData.findUserFollowing)\n\n                setFindUserFollowers(responseData.findUserFollowers)\n\n                setFindUserPosts(responseData.findPosts)\n\n                setUserProfile(responseData.findUser)\n\n                setDictionaryCreated(responseData.findUser.dictionarys.length)\n\n                setDictionaryNotCreated(responseData.findUser.dictionarys.length)\n\n\n            } catch (err) {\n\n            }\n        }\n\n        fetchUserProfile()\n\n\n\n\n    }, [sendRequest, auth.token, toUpdate])\n\n    const [dictionaryCreated, setDictionaryCreated] = useState(false)\n\n    const [dictionaryNotCreated, setDictionaryNotCreated] = useState()\n\n\n\n\n    // if (userProfile.dictionarys.length === 0) {\n    //     setDictionaryNotCreated(true)\n    //     setDictionaryCreated(false)\n    // } else {\n    //     setDictionaryNotCreated(false)\n    //     setDictionaryCreated(true)\n    // }\n\n    const toggleSecretWord = () => {\n        setDictionaryInputMode(false)\n        setSecretDictionaryInputMode(true)\n    }\n\n    const toggleWord = () => {\n        setSecretDictionaryInputMode(false)\n        setDictionaryInputMode(true)\n    }\n\n    const [secretWordList, setSecretWordList] = useState()\n\n    useEffect(() => {\n        const fetchSecretWords = async () => {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/user/secretWordFeed`,\n                    \"GET\",\n                    null,\n                    {\n                        Authorization: 'Bearer ' + auth.token\n                    }\n                )\n\n                setSecretWordList(responseData.byDate)\n            } catch (err) {\n\n            }\n\n\n\n        }\n\n        fetchSecretWords()\n\n    }, [sendRequest, auth.token])\n\n    const [secretWordInput, setSecretWordInput] = useState()\n\n    const onSubmitSecretWord = async (data, e) => {\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/createSecretWord`,\n                \"POST\",\n                JSON.stringify({\n                    theDictionary: userProfile.dictionarys[0]._id,\n                    theWord: data.theWord,\n                    theDefinition: data.theDefinition\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n        } catch (err) {\n\n        }\n\n        e.target.reset()\n\n    }\n\n\n\n\n\n\n\n    const [urDictionaryMode, setUrDictionaryMode] = useState(false)\n\n    const urDictionaryHandler = () => {\n\n\n\n        setSearchMode(false)\n        setDictionaryFeedMode(false)\n        setHomeMode(false)\n        setUrDictionaryMode(true)\n\n\n\n    }\n\n    const createDictionarySubmitDirection = () => {\n        setHomeMode(false)\n        setDictionaryFeedMode(true)\n        setDictionaryInputMode(true)\n    }\n\n    const onSubmitNewDictionary = async (data, e) => {\n\n        try {\n            await sendRequest(\n                `${process.env.REACT_APP_BACKEND_URL}/user/createDictionary`,\n                \"POST\",\n                JSON.stringify({\n                    dictionary: data.cDictionary\n                }),\n                {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: 'Bearer ' + auth.token\n                }\n            )\n            document.location.reload()\n\n\n        } catch (err) {\n\n        }\n\n        e.target.reset()\n\n\n\n    }\n\n\n\n\n    // useEffect(() => {\n\n    //     const fetchUserAndDictionary = async () => {\n    //         try {\n    //             const responseData = await sendRequest(\n    //                 `${process.env.REACT_APP_BACKEND_URL}ACKEND_URL}/user/getDictionaryAndUser/`,\n    //                 \"GET\",\n    //                 null,\n    //                 {\n    //                     Authorization: 'Bearer ' + auth.token\n    //                 }\n    //             )\n\n\n    //             setUserAndDictionary(responseData)\n    //             //console.log(userAndDictionary)\n    //         } catch (err) {\n\n    //         }\n\n\n\n    //     }\n\n\n    //     fetchUserAndDictionary()\n\n    // }, [sendRequest, auth.token])\n\n    const [stripeSignup, setStripeSignup] = useState()\n\n\n    const expressSignUp = async () => {\n\n        setHomeMode(false)\n        setSearchMode(false)\n        setDictionaryFeedMode(false)\n        setSponsorShips(false)\n        setProfile(false)\n\n\n        setStripeSignup(true)\n\n\n\n\n        // try {\n        //     const responseData = await sendRequest(\n        //         `${process.env.REACT_APP_BACKEND_URL}/user/upgradeToBusiness`,\n        //         \"GET\",\n        //         null,\n        //         {\n\n        //             Authorization: 'Bearer ' + auth.token\n        //         }\n        //     )\n\n\n        // } catch (err) {\n\n        // }\n\n\n\n    }\n\n\n    const [toggleSponsorShips, setSponsorShips] = useState()\n\n    const ssClick = () => {\n\n        setHomeMode(false)\n        setSearchMode(false)\n        setUrDictionaryMode(false)\n        setSecretDictionaryInputMode(false)\n        setStripeSignup(false)\n        setDictionaryFeedMode(false)\n        setProfile(false)\n\n\n        setSponsorShips(true)\n\n    }\n\n   \n\n    const [toggleProfile, setProfile] = useState()\n\n\n    const profileClick = () =>{\n\n        setHomeMode(false)\n        setSearchMode(false)\n        setDictionaryFeedMode(false)\n        setSponsorShips(false)\n\n\n        setStripeSignup(false)\n\n       \n        setProfile(true)\n\n\n    }\n\n\n    return (\n\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <div className=\"hs-background\"> </div>\n            {\n                dictionaryNotCreated === 0 &&\n                <div\n                    className=\"createDictionary\"\n                >\n                    <p\n\n                    >hey guys u gotta create a dictionary before joining us</p>\n                    <div >\n                        <form onSubmit={handleSubmit(onSubmitNewDictionary)}>\n                            <input {...register(\"cDictionary\")} />\n                            <button>create dictionary</button>\n                        </form>\n                    </div>\n                </div>\n            }\n            {dictionaryCreated > 0 &&\n                <div>\n\n                    <div>\n                        <aside className=\"hs--left-sidebar\">\n                            <div onClick={homeHandler} className=\"hs--left-sidebar-home\">home</div>\n                            <div onClick={dictionaryFeedHandler} className=\"hs--left-sidebar-logo\">dictionary feed</div>\n                            {/* <div onClick={urDictionaryHandler} className=\"hs--left-sidebar-urd\">ur dictionary</div> */}\n                            \n                            <div onClick={profileClick} className=\"hs--left-sidebar-urd\">profile</div>\n                            {/* <button className=\"home--login\">words</button>\n                    <button className=\"home--signup\">secret words</button> */}\n                            <div className=\"hs--left-sidebar-sponsor\" onClick={ssClick}> sponsorships</div>\n                        </aside>\n                    </div>\n\n               \n                    <div>\n                        \n                        \n\n                        {\n                            toggleProfile &&\n                            userProfile &&\n\n                            <ProfileContainer\n                                userProfile={userProfile}\n                                findUserPosts={findUserPosts}\n                                findUserFollowers={findUserFollowers}\n                                findUserFollowing={findUserFollowing}\n                            />\n\n\n                        }\n\n\n\n\n\n\n                        {homeMode && loadedSplashFeed &&\n                            <div>\n                                <div >\n                                <form onSubmit={handleSubmit(onSubmitSplash)}>\n                                 <textarea \n   \n                                    {...register(\"post\")} className=\"splashes--input-input\" />\n                                        <br />\n\n                                        <button  className=\"bttn-post splashes--input\">post</button>\n                                </form>\n                                    \n                                </div>\n\n                                <SplashFeedList posts={loadedSplashFeed} />\n                            </div>\n                        }\n\n                        {searchMode &&\n                            <div>\n                                <div className=\"home--search-star\" onClick={starSearchHandler}> star </div>\n                                {starSearch && userProfile && <StarsList stars={starData} dictionaryStatus={userProfile.following} />}\n                                <div onClick={splashSearchHandler} className=\"home--search-splash\"> post {splashHand.length} </div>\n                                {splashHand1 && splashHand && <SplashList posts={splashHand} />}\n                                <div onClick={dictionarySearchHandler} className=\"home--search-dictionary\"> dictionary {dictionaryHand.length}</div>\n                                {dictionaryHand1 && dictionaryHand && <DStarList star={dictionaryHand} />}\n                                <div onClick={wordSearchHandler} className=\"home--search-word\"> word {wordHand.length}</div>\n                                {wordHand1 && wordHand && <WordList words={wordHand} />}\n                                <div onClick={definitionSearchHandler} className=\"home--search-definition\"> definition {definitionHand.length} </div>\n                                {definitionHand1 && definitionHand && <DefinitionList words={definitionHand} />}\n                                {/* <div onClick={secretWordSearchHandler} className=\"home--search-secretword\"> secret word {secretWordHand.length} </div>\n                                {secretWordHand1 && secretWordHand && <SecretWordList words={secretWordHand} />} */}\n                                {/* <div className=\"home--search-secretworddefinition\"> secret word definition {secretWordDefinitionHand.length}</div>\n                                {secretWordDefinitionHand1 && secretWordDefinitionHand && <SecretWordDefinitionList />} */}\n                            </div>\n                        }\n\n                        {\n                            dictionaryFeedMode &&\n                            <div>\n\n                                {createADictionaryCard &&\n                                    <div>\n                                        <div className=\"createDictionary\">\n                                            <form onSubmit={handleSubmit(onSubmitNewDictionary)}>\n                                                <input {...register(\"cDictionary\")} />\n                                                <button>create dictionary</button>\n                                            </form>\n                                        </div>\n                                    </div>\n                                }\n\n                                {\n                                    secretDictionaryInputMode &&\n                                    <div>\n                                        <button onClick={toggleSecretWord} className=\"dictionaryFeed-secretButton\">secret</button>\n                                        <button onClick={toggleWord} className=\"dictionaryFeed-notSecretButton\">not secret</button>\n\n                                        <div>\n                                            <form onSubmit={handleSubmit(onSubmitSecretWord)}>\n                                                <label className=\"dictionaryFeed-secretWordWordLabel\">word</label>\n                                                <input {...register(\"theWord\")} className=\"dictionaryFeed-secretWordInput\" />\n                                                <label className=\"dictionaryFeed-secretWordDefinitionLabel\">definition</label>\n                                                <textarea  {...register(\"theDefinition\")} className=\"dictionaryFeed-secretWordDefinitionInput\" />\n                                                <button onClick={() => reset()} className=\"dictionaryFeed-programButton\">program</button>\n                                            </form>\n                                            <div>\n                                                <SecretWordFeedList words={secretWordList} />\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                }\n                                {\n                                    dictionaryInputMode && dictionaryFeed &&\n                                    <div>\n                                        <div>\n                                            {/* <button onClick={toggleSecretWord} className=\"dictionaryFeed-secretButton\">secret</button>\n                                            <button onClick={toggleWord} className=\"dictionaryFeed-notSecretButton\">not secret</button> */}\n\n                                            <div>\n                                                <form onSubmit={handleSubmit(onSubmitDictionaryWord)}>\n                                                    <label className=\"dictionaryFeed-wordInput-label\">word</label>\n                                                    <input  className=\"dictionaryFeed-wordInput\" {...register(\"word\")} />\n\n                                                    <label className=\"dictionaryFeed-definitionLabel\">definition</label>\n                                                    <textarea  className=\"dictionaryFeed-definitionInput\" {...register(\"definition\")} />\n                                                    <label className=\"dictionaryFeed-etymology\">etymology</label>\n                                                    <textarea  className=\"dictionaryFeed-etymologyInput\" {...register(\"etymology\")} />\n\n\n                                                    <button onClick={() => reset()} className=\"dictionaryFeed-programButton\">program</button>\n                                                </form>\n                                            </div>\n                                        </div>\n                                        <div >\n\n\n\n\n                                            <DictionaryFeedList words={dictionaryFeed} />\n\n                                            {/* {\n                                            dictionaryFeed.map((x) =>\n                                                <div >\n                                                    <div style={{ color: \"rgb(3, 177, 235)\" }}>{x.word.definiteWord}</div>\n                                                    <div>\n                                                        {x.definition.map((z) =>\n                                                            <div>{z.aDefinition}</div>\n                                                        )}\n                                                    </div>\n                                                    <div><label className=\"dictionaryFeed-origin\">-ORIGIN</label> {x.etymology}</div>\n                                                    <div>\n                                                        {x.date}\n                                                    </div>\n                                                    <div> <DictionaryFeedItem dictionary={x.dictionary} /> </div>\n\n                                                </div>\n                                            )\n\n                                        } */}\n                                        </div>\n                                        {/* <DictionaryFeedList words={dictionaryFeed} /> */}\n                                    </div>\n                                }\n\n                            </div>\n                        }\n\n\n                        {\n                            stripeSignup &&\n                            <StripeContainer update={setToUpdate} accEmail={userProfile.email} isAccount={userProfile.stripeBusinessId} />\n                        }\n\n                        {\n                            toggleSponsorShips &&\n                            <SScontainer userProfile={userProfile} />\n                        }\n\n\n            \n                    </div> \n                        \n                    <div>\n                        <aside className=\"hs--right-sidebar\">\n\n                                <button className=\"bttn-logout hs--right-sidebar-search\" onClick={auth.logout}>logout</button>\n                                <div>\n                                <form onSubmit={handleSubmit(onSubmitSearch)}>\n                                    <div className=\"search-padding\">\n                                    <input placeholder=\"search\" {...register(\"searchBar\")}  />\n\n                                    <button  className=\"bttn-search\" >search </button>\n                                    </div>\n                                </form>\n                                </div>\n                           \n                        </aside>\n\n                        <div className=\"hs--right-sidebar-expressSignUp\">\n                            {\n                                !userProfile.stripeBusinessId &&\n                                <div>\n                                    <div>go pro</div>\n                                    <button className=\"bttn-update\" onClick={expressSignUp}>upgrade {toUpdate}</button>\n                                </div>\n                            }\n                            {\n                                userProfile.stripeBusinessId &&\n                                <div>\n                                    <div >update ur account</div>\n                                    <button className=\"bttn-update\" onClick={expressSignUp}> update </button>\n                                </div>\n                            }\n\n                        </div>\n                    </div>\n                </div>\n            }\n\n        </React.Fragment>\n    )\n}\n\n\n\n\nexport default React.memo(HomeScreen)\n","import React from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from \"react-router-dom\"\n\nimport { useAuth } from './shared/hooks/auth-hook';\n\n\nimport { AuthContext } from \"./shared/context/auth-context\"\nimport Homepage from './shared/notLoggedIn/Homepage';\nimport HomeScreen from './loggedIn/pages/HomeScreen';\n\n\nconst App = () => {\n\n  const { token, login, logout, userId } = useAuth();\n\n  let routes\n\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/home\">\n          <HomeScreen />\n        </Route>\n        <Redirect to=\"/home\" />\n      </Switch>\n    )\n\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\">\n          <Homepage />\n        </Route>\n      </Switch>\n    )\n  }\n\n\n  return (\n    <AuthContext.Provider\n      value={{ isLoggedIn: !!token, token: token, userId: userId, login: login, logout: logout }}\n    >\n\n      <Router>\n        {routes}\n      </Router>\n\n    </AuthContext.Provider>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}